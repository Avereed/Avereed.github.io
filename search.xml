<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>学习记录</title>
    <url>/2021/09/22/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="学习笔记篇——HTML"><a href="#学习笔记篇——HTML" class="headerlink" title="学习笔记篇——HTML"></a>学习笔记篇——HTML</h2><h3 id="一-HTTP大概"><a href="#一-HTTP大概" class="headerlink" title="(一)HTTP大概"></a>(一)HTTP大概</h3><ol>
<li><p>对于中文网页需要用<u><meta charset="utf-8" ></u>声明编码，否则会出现乱码，有些浏览器会设置GBK为默认编码，需设置<u><meta charest="gbk"></u>。</p>
</li>
<li><p>元素解析(起始标记为&lt;…&gt; 终止标志为&lt;/…&gt;)</p>
<ul>
<li><p>“<!DOCTYOE html>“声明为HTML5文档</p>
</li>
<li><p>“<html>“元素是HTML页面的根元素(详情了解根元素点击这-<a href="https://blog.csdn.net/ixygj197875/article/details/79737953">根元素</a>)</p>
</li>
<li><p>“<head>“ 元素包含文档元(meta)数据  </p>
</li>
<li><p>“<title>“ 元素描述文档标题</p>
</li>
<li><p>“<body>“ 元素包含可见页面的内容  </p>
</li>
<li><p>“<h1>“ 元素定义一个大标题</p>
</li>
<li><p>“<p>“ 元素是段落    </p>
</li>
</ul>
</li>
</ol>
<p>3 . HTML意思是超文本<u>标记语言</u><br>    * <u>HTML标签通常成对出现</u>,(写的时候还是一对对的写好点)。<br>    * doctype是不区分大小写的<br>4 . 一个网页的大概框架为  </p>
<pre class="language-<html>" data-language="<html>"><code class="language-<html>">&lt;head&gt;
&lt;title&gt;...&lt;title&gt;
&lt;&#x2F;head&gt;
&lt;body&gt;
&lt;h1&gt;...&lt;&#x2F;h1&gt;
&lt;p&gt;...&lt;&#x2F;p&gt;
&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;  </code></pre>
<ol start="5">
<li>plus:<pre class="language-<html>" data-language="<html>"><code class="language-<html>">&lt;head&gt;
&lt;title&gt;...&lt;title&gt;
&lt;&#x2F;head&gt;
&lt;body&gt;
&lt;header&gt;
&lt;&#x2F;header&gt;
&lt;nav&gt;
&lt;&#x2F;nav&gt;
&lt;h1&gt;...&lt;&#x2F;h1&gt;
&lt;p&gt;...&lt;&#x2F;p&gt;
&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;  </code></pre>
6 . 头部信息放在<head></head>之间，这部分内容包括<title>,<base>,<link>,<style>,<script>,<meta>。设置网页定时跳转：<u><meta http-equiv="refresh" content="秒 "url="资源途径"/></u><br>7 . HTML图形是通过<img>定义,如<code loading="lazy">&lt;img loading=&quot;lazy&quot; src=&quot;/images/;ogo.png&quot; width=&quot;258&quot; height=&quot;39&quot;&gt;</code><br>8 . 注释的表达<code>&lt;!-- 这是一个注释 ---&gt;</code>  ,换行是<br /> , 水平线是<hr /><br>9 . <b>标记含义是加粗(感觉和<strong>也没什么区别),<i>标记意思是斜体(感觉和<em>也没什么区别)<br>10 . <small>标记将旁注呈现为小型文本，免责声明，注意事项均属于这<br>12 . 上标为<sup>，下标为<sub><br>13 . CSS背景色属性为(background-color),字体(font-family),颜色(color),字体大小(font-size)文字(text-align)<br>14 . </li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Python学习</title>
    <url>/2021/11/27/Python/</url>
    <content><![CDATA[<blockquote>
<p>人生苦短,我学Python</p>
</blockquote>
<blockquote>
<p>注意: ‘’&gt;&gt;&gt;’’后面表示代码内容</p>
</blockquote>
<h3 id="1-Python语法"><a href="#1-Python语法" class="headerlink" title="1. Python语法"></a>1. Python语法</h3><h4 id="1-1-Hello-World"><a href="#1-1-Hello-World" class="headerlink" title="1.1 Hello World"></a>1.1 Hello World</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span>
Hello World!

Python字符串以单引号<span class="token string">''</span>括起来</code></pre>

<p>tips: Python语句结束没有分号(把缩进和换行当成文法的有效部分,可以表达出完整的语义)</p>
<h4 id="1-2-操作符"><a href="#1-2-操作符" class="headerlink" title="1.2 操作符"></a>1.2 操作符</h4><pre class="language-python" data-language="python"><code class="language-python">括号			<span class="token punctuation">(</span><span class="token punctuation">)</span>
乘方      	<span class="token operator">**</span>
乘法<span class="token operator">/</span>除法  	   <span class="token operator">*</span> <span class="token operator">/</span>
整除			<span class="token operator">//</span></code></pre>



<h4 id="1-3-字符串操作"><a href="#1-3-字符串操作" class="headerlink" title="1.3 字符串操作"></a>1.3 字符串操作</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">+</span> 
	进行字符串的拼接<span class="token punctuation">,</span>将前后两个字符串首尾连接起来
	
<span class="token operator">*</span>
	进行重复操作
	<span class="token string">'Span'</span><span class="token operator">*</span><span class="token number">3</span>结果为<span class="token string">'SpanSpanSpan'</span></code></pre>



<h4 id="1-4-注释"><a href="#1-4-注释" class="headerlink" title="1.4  注释"></a>1.4  注释</h4><pre class="language-python" data-language="python"><code class="language-python">注释以<span class="token comment">#开头</span>
单行注释	<span class="token comment">#这是一个注释</span>
多行注释	
		使用ctrl<span class="token operator">+</span><span class="token operator">/</span>
		输入<span class="token triple-quoted-string string">''''''</span>或者<span class="token triple-quoted-string string">""""""</span>，将要注释的代码插在中间</code></pre>



<h4 id="1-5-数据类型"><a href="#1-5-数据类型" class="headerlink" title="1.5 数据类型"></a>1.5 数据类型</h4><pre class="language-python" data-language="python"><code class="language-python">数字型
		整数<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    	浮点型<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>
        布尔型<span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span>
        复数型<span class="token punctuation">(</span><span class="token builtin">complex</span><span class="token punctuation">)</span><span class="token punctuation">:</span>主要用于科学计算，如平面场，电容电感

非数字型
		字符串
    	列表
        元组
        字典</code></pre>



<h4 id="1-6-模块"><a href="#1-6-模块" class="headerlink" title="1.6 模块"></a>1.6 模块</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> 模块对象</code></pre>



<h4 id="1-7-定义新函数"><a href="#1-7-定义新函数" class="headerlink" title="1.7 定义新函数"></a>1.7 定义新函数</h4><pre class="language-python" data-language="python"><code class="language-python">使用<span class="token keyword">def</span>关键字<span class="token punctuation">,</span>表示接下来是一个函数定义
<span class="token keyword">def</span> <span class="token function">print_lyrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm a lum"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I sleep all night"</span><span class="token punctuation">)</span></code></pre>



<h4 id="1-8-海龟绘图"><a href="#1-8-海龟绘图" class="headerlink" title="1.8 海龟绘图"></a>1.8 海龟绘图</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> turtle
bob <span class="token operator">=</span> turtle<span class="token punctuation">.</span>Turtle<span class="token punctuation">(</span><span class="token punctuation">)</span>
bob<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
bob<span class="token punctuation">.</span>lt<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>
bob<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
bob<span class="token punctuation">.</span>lt<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>
bob<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
bob<span class="token punctuation">.</span>lt<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>
bob<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></code></pre>



<h4 id="1-9-引号的使用"><a href="#1-9-引号的使用" class="headerlink" title="1.9 引号的使用"></a>1.9 引号的使用</h4><pre class="language-python" data-language="python"><code class="language-python">Python中使用单引号或双引号是没有区别的<span class="token punctuation">,</span>都可以来表示一个字符串
好处：
	<span class="token number">1</span><span class="token punctuation">.</span>简化程序员开发<span class="token punctuation">,</span>避免出错
	<span class="token number">2</span><span class="token punctuation">.</span>减少转义字符的使用</code></pre>

<h5 id="1-9-1-包含单引号的字符串"><a href="#1-9-1-包含单引号的字符串" class="headerlink" title="1.9.1 包含单引号的字符串"></a>1.9.1 包含单引号的字符串</h5><p>假如你想定义一个字符串my_str，其值为： I’m a student，则可以采用如下方式，通过转义字符 \ 进行定义</p>
<pre class="language-python" data-language="python"><code class="language-python">my_str <span class="token operator">=</span> <span class="token string">'I\'m a student'</span></code></pre>

<p>也可以不使用转义字符,利用双引号直接进行定义</p>
<pre class="language-python" data-language="python"><code class="language-python">my_str <span class="token operator">=</span> <span class="token string">"I'm a student"</span></code></pre>



<h5 id="1-9-2-包含双引号的字符串"><a href="#1-9-2-包含双引号的字符串" class="headerlink" title="1.9.2 包含双引号的字符串"></a>1.9.2 包含双引号的字符串</h5><p>假如你想定义一个字符串my_str，其值为： Jason said “I like you” ，则可以采用如下方式，通过转义字符 \ 进行定义</p>
<pre class="language-python" data-language="python"><code class="language-python">my_ <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"Jason said \"I like you\""</span></code></pre>

<p>也可以不使用转义字符，利用单引号直接进行定义</p>
<pre class="language-none"><code class="language-none">my_str &#x3D; &#39;Jason said &quot;I like you&quot;&#39;</code></pre>

]]></content>
  </entry>
  <entry>
    <title>C语言的一些理解</title>
    <url>/2021/09/30/c%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h2 id="对c语言scanf函数的一些理解"><a href="#对c语言scanf函数的一些理解" class="headerlink" title="对c语言scanf函数的一些理解"></a>对c语言scanf函数的一些理解</h2><p>空白符包括：空格，制表符，回车符，换行符，换页符</p>
<p>scanf双引号括起来的即为格式化字符串，输入时应该严格执行格式 </p>
<p>scanf函数中空白字符会使scanf()函数在读操作中略去输入中的一个或多个空白字符，空白符可以是space,tab,newline等等，直到第一个非空白符出现为止。(如果要输入空格，scanf函数中格式化说明符中间不能有空格)</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input the data\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//这里多了一个回车符\n</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>需要输入两个数程序才结束</p>
<p>because:用空白符结尾时，scanf会跳过空白符去读下一个字符，所以必须再输入一个数</p>
<p>使用</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    也会出现同样问题</code></pre>

]]></content>
  </entry>
  <entry>
    <title>数学建模</title>
    <url>/2022/09/30/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h1 id="关于我的建模之路"><a href="#关于我的建模之路" class="headerlink" title="关于我的建模之路"></a>关于我的建模之路</h1><h2 id="评价类模型"><a href="#评价类模型" class="headerlink" title="评价类模型"></a>评价类模型</h2><h3 id="一-层次分析法-AHP"><a href="#一-层次分析法-AHP" class="headerlink" title="一.层次分析法(AHP)"></a>一.层次分析法(AHP)</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token number">1.</span>分析系统中各因素之间的关系，建立系统的递阶层次结构，画出层次结构图
<span class="token number">2.</span>对于同一层次的各元素关于上一层次中某一准则的重要性进行两两比较，构造两两比较矩阵<span class="token punctuation">(</span>判断矩阵<span class="token punctuation">)</span>
<span class="token number">3.</span>由判断矩阵计算被比较元素对于该准则的相对权重，并进行一致性检验<span class="token punctuation">(</span>检验通过权重才能用<span class="token punctuation">)</span>
	<span class="token number">1.</span>计算一致性指标CI
	<span class="token number">2.</span>查找n对应的平均随机一致性指标RI
	<span class="token number">3.</span>计算一致性比例CR
		CR<span class="token operator">&lt;</span><span class="token number">0.1</span>才认为一致性可以接受
<span class="token number">4.</span>根据权重计算得分</code></pre>



<h3 id="二-熵权法Topsis"><a href="#二-熵权法Topsis" class="headerlink" title="二.熵权法Topsis"></a>二.熵权法Topsis</h3><p><img src="https://wx1.sinaimg.cn/mw2000/0085Lngngy1h6ekbbsbbrj30s60f9agf.jpg" alt="权重" loading="lazy"></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token number">1.</span>原始矩阵正向化
<span class="token number">2.</span>正向化矩阵标准化<span class="token punctuation">(</span>如果存在负数<span class="token punctuation">,</span>则使用另一种标准化<span class="token punctuation">)</span>
<span class="token number">3.</span>熵权法确定指标之间的权重
<span class="token number">4.</span>计算与最大值的距离和最小值的距离，并算出得分</code></pre>



<h3 id="三-模糊综合评价"><a href="#三-模糊综合评价" class="headerlink" title="三.模糊综合评价"></a>三.模糊综合评价</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token number">1.</span>取因素集 U<span class="token operator">=</span><span class="token punctuation">&#123;</span>u1<span class="token punctuation">,</span>u···un<span class="token punctuation">&#125;</span>
<span class="token number">2.</span>取评语集 V<span class="token operator">=</span><span class="token punctuation">&#123;</span>v1<span class="token punctuation">,</span>v2···vm<span class="token punctuation">&#125;</span>
<span class="token number">3.</span>确定各因素的权重 A<span class="token operator">=</span><span class="token punctuation">&#123;</span>w1<span class="token punctuation">,</span>w2···wn<span class="token punctuation">&#125;</span>
<span class="token number">4.</span>确定模糊综合评判矩阵，对每个因素ui做出评价<span class="token punctuation">(</span>隶属度<span class="token punctuation">)</span>
	以Ri为第<span class="token number">i</span>行构成评价矩阵
<span class="token number">5.</span>模糊综合评判，进行矩阵的合成运算
B <span class="token operator">=</span> A · R
取B中数值<span class="token punctuation">(</span>隶属度<span class="token punctuation">)</span>最大的评语作为综合评判的结果

步骤根据例<span class="token number">14.2</span></code></pre>



<h3 id="四-灰色关联分析"><a href="#四-灰色关联分析" class="headerlink" title="四.灰色关联分析"></a>四.灰色关联分析</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token number">1.</span>画统计图
<span class="token number">2.</span>确定分析数列
	<span class="token number">1.</span>母序列：反映系统行为特征的数据序列，类似因变量
	<span class="token number">2.</span>子序列：影响系统行为的因素组成的数据序列，类似自变量
<span class="token number">3.</span>对变量进行预处理<span class="token punctuation">(</span>去量纲，缩小变量范围<span class="token punctuation">)</span>：先求出每个指标的均值，再用该指标中的每个元素都除以其均值
<span class="token number">4.</span>计算子序列中每个指标与母序列的关联系数
<span class="token number">5.</span>定义<span class="token number">4</span>中每一列求出的均值为x0和xi的灰色关联系数</code></pre>



<h2 id="插值法"><a href="#插值法" class="headerlink" title="插值法"></a>插值法</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab">模拟产生新的但又比较靠谱的数据，插值函数曲线一定经过所有原来点

分段三次埃尔米特插值：pchip函数
<span class="token operator">*</span><span class="token punctuation">(</span>推荐<span class="token punctuation">)</span>三次样条插值：spline函数</code></pre>



<h2 id="拟合算法"><a href="#拟合算法" class="headerlink" title="拟合算法"></a>拟合算法</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab">拟合不需要曲线一点经过给定的点，拟合的目标是寻求一个函数，使得该曲线在某种准则下与所有的数据点最为接近，即曲线拟合的最好<span class="token punctuation">(</span>最小化损失函数<span class="token punctuation">)</span>

匿名函数
最小二乘法
fplot函数：画出匿名函数在自变量范围内的图像
线性函数：线性于参数，这时可直接看R²
其他的就看SSE，SSE越小，拟合越好</code></pre>



<h2 id="相关系数"><a href="#相关系数" class="headerlink" title="相关系数"></a>相关系数</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token number">1.</span>Pearson相关系数
	先画出散点图，观察是否线性相关，当两个变量本身就是线性的关系，那么皮尔逊相关系数绝对值大的就是相关性强，小的就是相关性弱。 
	tcdf：累计密度函数，返回的是概率值
	tinv：累计密度函数的反函数，返回的是对应的x值
	tpdf：x的值对应的y值
	计算皮尔逊相关系数，并做出相关系数表。
	进行正态分布的假设检验：
		<span class="token number">1.</span>样本数n<span class="token operator">></span><span class="token number">30</span>：JB检验
		<span class="token number">2.</span>样本数<span class="token number">3</span><span class="token operator">&lt;=</span>n<span class="token operator">&lt;=</span><span class="token number">50</span>：Shapiro<span class="token operator">-</span>wilk检验
		<span class="token number">3.</span>数据量特别大：Q<span class="token operator">-</span>Q图
	对皮尔逊相关系数进行假设检验
<span class="token number">2.</span>Spearman相关系数
	被定义为等级之间的皮尔逊相关系数
	计算斯皮尔曼相关系数
	斯皮尔曼相关系数的假设检验
		<span class="token number">1.</span>样本数n<span class="token operator">&lt;=</span><span class="token number">30</span>，直接查临界表，相关系数必须大于等于表中的临界值，才能得出显著的结论
		<span class="token number">2.</span>样本数为大样本，计算检验值，使用normcdf计算的值与<span class="token number">0.05</span>比较
	注意：
		<span class="token number">1.</span>连续数据，正态分布，线性关系，用皮尔逊
		<span class="token number">2.</span>上面条件有个不满足，就用斯皮尔曼
		<span class="token number">3.</span>两个定序之间用斯皮尔曼，定序：仅仅反映观测对象等级，顺序关系的数据</code></pre>



<h2 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab">回归分析的任务：通过研究自变量x和因变量y的相关关系，尝试去解释y的形成机制，进而达到通过x去预测y的目的
回归分析的三个使命：
	<span class="token number">1.</span>识别重要变量，可使用逐步回归
	<span class="token number">2.</span>判断相关性的方向
	<span class="token number">3.</span>回归系数
无内生性，实际应用中，保证核心解释变量与u不相关

取对数：
	<span class="token number">1.</span>与市场价值相关：价格，营销额
	<span class="token number">2.</span>以年度量的变量
	<span class="token number">3.</span>比例变量：失业率，参与率
	<span class="token number">4</span>。变量取值必须非负数，如果包含<span class="token number">0</span>，则可以对y取对数<span class="token function">ln</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>y<span class="token punctuation">)</span>
创建虚拟变量
stata回归的语句：regress y x1 x2 ··· xk，默认使用<span class="token function">OLS</span><span class="token punctuation">(</span>最小二乘法<span class="token punctuation">)</span>
联合显著性检验，判断回归系数是不是都等于<span class="token number">0</span>
判断回归系数是不是显著异于<span class="token number">0</span>
标准化回归系数
扰动项：u<span class="token operator">~</span><span class="token function">N</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>σ²<span class="token punctuation">)</span>
异方差这里出现的信息可以理解为对于模型的稳定程度所做的贡献，异方差是指各个扰动项的方差不相同，那么方差较大的扰动项破坏模型稳定性的程度就较大，我们就说它包含的信息量减少。
异方差检验：bp检验，怀特检验
解决异方差：OLS<span class="token operator">+</span>稳健的标志误
多重共线性检验：说明计算得出的回归系数结果不可靠，不显著，可通过方差膨胀因子分析
注意检验异方差和多重共线性
逐步回归：
	<span class="token number">1.</span>向前逐步回归
	<span class="token number">2.</span>向后逐步回归
标准化回归系数比较绝对值</code></pre>



<h2 id="lasso回归"><a href="#lasso回归" class="headerlink" title="lasso回归"></a>lasso回归</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab">使用一般的OLS对数据进行回归，计算方差膨胀因子VIF，如果VIF<span class="token operator">></span><span class="token number">10</span>说明存在多重共线性，可讲lasso回归视为进阶版的逐步回归，lasso回归可以帮我们筛选出不重要的变量，lasso回归只起到变量筛选的目的，将筛选出的变量进行正常的回归即可</code></pre>



<h2 id="分类模型"><a href="#分类模型" class="headerlink" title="分类模型"></a>分类模型</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab">分类是已知类别的
数据预处理：生成虚拟变量
逻辑回归
出现过拟合现象时可把数据分为训练组和测试组，用训练组的数据估计出模型，再用测试组的数据进行测试
二分类：
	<span class="token number">1.</span>logistic回归：Sigmoid函数
	<span class="token number">2.</span>Fisher判别
多分类：
	<span class="token number">1.</span>logistic回归：Softmax函数
	<span class="token number">2.</span>Fisher判别</code></pre>



<h2 id="聚类模型"><a href="#聚类模型" class="headerlink" title="聚类模型"></a>聚类模型</h2><p><a href="https://zhuanlan.zhihu.com/p/401173177">聚类算法的评估指标及实现 - 知乎 (zhihu.com)</a></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">聚类是未知类别的
样本和样本之间一般是基于欧式距离的：每个指标下两个样本间的距离平方和
类和类之间的常用距离：
	<span class="token number">1.</span>最短距离法
	<span class="token number">2.</span>最长距离法
	<span class="token number">3.</span>组间平均连接法
	<span class="token number">4.</span>组内平均连接法
	<span class="token number">5.</span>重心法
	
K<span class="token operator">-</span>means聚类
量纲不一样的话要进行标准化

层次聚类
肘部图
聚合系数折线图

DBSCAN算法：基于密度的聚类方法

轮廓系数：结合了聚类的凝聚度和分离度，用于评估聚类的效果。该值处于<span class="token operator">-</span><span class="token number">1</span><span class="token operator">~</span><span class="token number">1</span>之间，值越大，表示聚类效果越好。计算方法如下：
	<span class="token number">1.</span>对于每个样本点<span class="token number">i</span>，计算点<span class="token number">i</span>与其同一个簇内的所有其他元素距离的平均值，记作<span class="token function">a</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span>，用于量化簇内的凝聚度。
	<span class="token number">2.</span>选取<span class="token number">i</span>外的一个簇b，计算<span class="token number">i</span>与b中所有点的平均距离，遍历所有其他簇，找到最近的这个平均距离<span class="token punctuation">,</span>记作<span class="token function">b</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span>，即为<span class="token number">i</span>的邻居类，用于量化簇之间分离度。
	<span class="token number">3.</span>对于样本点<span class="token number">i</span>，轮廓系数<span class="token function">s</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span>–<span class="token function">a</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>计算所有<span class="token number">i</span>的轮廓系数，求出平均值即为当前聚类的整体轮廓系数，度量数据聚类的紧密程度。
	
轮廓系数可视化图：matlab中的silhouette函数
	clust <span class="token operator">=</span> <span class="token function">kmeans</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>k<span class="token punctuation">)</span>				<span class="token comment">%返回k均值聚类后的序号</span>
	<span class="token punctuation">[</span>s<span class="token punctuation">,</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">silhouette</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>clust<span class="token punctuation">)</span>		<span class="token comment">%默认使用平方欧式距离</span></code></pre>



<h2 id="时间序列分析"><a href="#时间序列分析" class="headerlink" title="时间序列分析"></a>时间序列分析</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab">时间序列组成要素：
	<span class="token number">1.</span>时间要素
	<span class="token number">2.</span>数值要素
时期序列中，数值要素反映现象在一定时期内的发展的结果
时点序列中，数值要素反映现象在一定时点上的瞬间水平
时间序列数值变化规律：
	<span class="token number">1.</span>长期趋势：T
	<span class="token number">2.</span>季节趋势：S
	<span class="token number">3.</span>循环变动：C
	<span class="token number">4.</span>不规则变动：I
叠加模型和乘积模型：数据具有年内的周期性才能使用时间序列分解

具体步骤：
	<span class="token number">1.</span>做时间序列图
	<span class="token number">2.</span>判断时间序列包含的变动成分
	<span class="token number">3.</span>时间序列分解<span class="token punctuation">(</span>有周期性且包含长期趋势、季节变动或循环变动<span class="token punctuation">)</span>
	<span class="token number">4.</span>建立时间序列分析模型
	<span class="token number">5.</span>预测未来的指标数值
	
平稳时间序列：
	<span class="token number">1.</span><span class="token function">E</span><span class="token punctuation">(</span>Xt<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">E</span><span class="token punctuation">(</span>Xt<span class="token operator">-</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">(</span>均值为固定常数<span class="token punctuation">)</span>
	<span class="token number">2.</span><span class="token function">Var</span><span class="token punctuation">(</span>Xt<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Var</span><span class="token punctuation">(</span>Xt<span class="token operator">-</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> σ² <span class="token punctuation">(</span>方差存在且为常数<span class="token punctuation">)</span>
	<span class="token number">2.</span><span class="token function">Cov</span><span class="token punctuation">(</span>Xt<span class="token punctuation">,</span>Xt<span class="token operator">-</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> γ<span class="token function">s</span> <span class="token punctuation">(</span>协方差只和间距s有关，与t无关<span class="token punctuation">)</span>
白噪声序列：
	<span class="token number">1.</span><span class="token function">E</span><span class="token punctuation">(</span>Xt<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">E</span><span class="token punctuation">(</span>Xt<span class="token operator">-</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">(</span>均值为<span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token number">2.</span><span class="token function">Var</span><span class="token punctuation">(</span>Xt<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Var</span><span class="token punctuation">(</span>Xt<span class="token operator">-</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> σ² <span class="token punctuation">(</span>方差存在且为常数<span class="token punctuation">)</span>
	<span class="token number">2.</span><span class="token function">Cov</span><span class="token punctuation">(</span>Xt<span class="token punctuation">,</span>Xt<span class="token operator">-</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span>s <span class="token punctuation">!</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>

评价指标：平稳的R²越大越好，标准化BIC越小越好

白噪声进行残差检验：残差ACF和残差PACF，残差进行Q检验

滞后算子L

不同之间周期内的季节趋势S都是一样的，呈现规律性</code></pre>



<h2 id="ARCH和GARCH"><a href="#ARCH和GARCH" class="headerlink" title="ARCH和GARCH"></a>ARCH和GARCH</h2><pre class="language-stata" data-language="stata"><code class="language-stata">一般应用于股票这种高频数据
predict residess, residuals  &#x2F;&#x2F;保存残差，以变量residess接受最后的结果
hist residess,norm freq
norm freq 表示加上标准正态分布的概率密度函数</code></pre>



<h2 id="预测模型"><a href="#预测模型" class="headerlink" title="预测模型"></a>预测模型</h2><pre class="language-none"><code class="language-none">注意GM(1,1)原理的介绍P4~P14
误差平方和SSE来进行比较模型好坏，SSE越小说明模型越好
灰色系统：系统的部分信息已知，部分信息未知
灰色预测：什么时候用
	1.数据周期较短的非负时间序列
	2.数据经过准指数规律的检验，除前两期外，后面至少90%的期数的光滑比低于0.5
	3.数据的期数较短且和其他的数据之间的关联性不强
	
题目的小套路：
	1.画出时间序列图并简单分析下趋势
	2.将数据分为训练组和测试组，并利用测试组的数据判断哪种模型的预测效果最好
	3.选择上一部中得到的预测误差最小的模型，并使用全部数据进行重新建模，并对未来数据进行预测
	4.画出预测后的数据和原来数据的时序图，看看预测的未来趋势是否合理
	
累加数据，紧邻均值生成序列是累加序列相邻累加数据求平均

灰色微分方程转化为白色方程</code></pre>



<h2 id="数据分析模型"><a href="#数据分析模型" class="headerlink" title="数据分析模型"></a>数据分析模型</h2><p><a href="https://developer.aliyun.com/article/884872?spm=a2c6h.13262185.profile.97.488f410dEp9571">数据分析八大模型：详解PEST模型-阿里云开发者社区 </a></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">PEST模型：行业分析的业务模型
OGSM模型：企业管理方法论
人货场模型：销售分析的最常用模型，人货场指影响销售的三个重要因素<span class="token punctuation">(</span>不是三个指标<span class="token punctuation">)</span>
RFM模型：衡量客户 价值和客户创利能力的重要工具和手段
同期群模型：找出优势群体，用于商品分析<span class="token punctuation">(</span>商品LTV模型<span class="token punctuation">)</span>，用户分析<span class="token punctuation">(</span>用户留存率模型，用	 户LTV模型<span class="token punctuation">)</span>，渠道分析<span class="token punctuation">(</span>渠道质量分析模型<span class="token punctuation">)</span>
漏斗模型：当业务流程变长的时候，用户会流失。这样把整个流程串起来看，就好像一个“漏斗”一样。用数据描述这个流程，是为漏斗模型。</code></pre>



<h2 id="作图"><a href="#作图" class="headerlink" title="作图"></a>作图</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token number">1.</span>饼图
<span class="token number">2.</span>柱形图
<span class="token number">3.</span>条形图<span class="token punctuation">(</span>横过来的柱状图<span class="token punctuation">)</span>
<span class="token number">4.</span>双向条形图：数字绝对值的代码#<span class="token punctuation">,</span>##<span class="token number">0.00</span>_<span class="token punctuation">)</span><span class="token punctuation">;</span>#<span class="token punctuation">,</span>##<span class="token number">0.00</span>
<span class="token number">5.</span>直方图
<span class="token number">6.</span>折线图
<span class="token number">7.</span>柱形图顶端的折线图
<span class="token number">8.</span>散点图
<span class="token number">9.</span>箱线图
<span class="token number">10.</span>小提琴图
<span class="token number">11.</span>具有分布拟合的直方图：matlab中的histfit函数，返回的是绘图的句柄，<span class="token function">h</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>是直方图的句柄，<span class="token function">h</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>是密度曲线的句柄</code></pre>





<p>物价水平:CPI</p>
]]></content>
  </entry>
  <entry>
    <title>网页制作</title>
    <url>/2021/09/22/%E7%BD%91%E9%A1%B5%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="网页制作"><a href="#网页制作" class="headerlink" title="网页制作"></a>网页制作</h1><h2 id="第一章-网页设计基础知识"><a href="#第一章-网页设计基础知识" class="headerlink" title="第一章 网页设计基础知识"></a>第一章 网页设计基础知识</h2><ul>
<li><p>第一项:网页相关知识简介  </p>
<ul>
<li><p>互联网、因特网和万维网<br>互联网指的是由<u>若干计算机网络相互连接而成的网络</u>，进一步说，凡是能彼此通信的设备组成的网络就叫互联网。  因特网是目前全球最大的一个电子计算机互联网，由美国ARPA网（军事网络）发展而来  </p>
</li>
<li><p>网站和网页<br>网站是多个网页的结合，网页是一HTML语言为基础编写的，能够通过网络传输，比如传送门 <a href="http://www.tiantanpark.com/">北京天坛</a>   </p>
</li>
<li><p>网页与HTML<br>HTML(超文本标记语言)</p>
</li>
<li><p>静态网页和动态网页<br>两者的区别在所采用的技术上，动态网页是运行于服务器端口的代码，它可实现的功能较多，如:用户注册、登录、在线调查(也可认为是与服务器后端进行交互)，且其通常有一个标志性”?”符号。</p>
</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Java学习</title>
    <url>/2021/09/30/Java%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Java学习日志"><a href="#Java学习日志" class="headerlink" title="Java学习日志"></a>Java学习日志</h1><hr>
<pre class="language-Java" data-language="Java"><code class="language-Java">begin：
	以下为我对于Java的一些见解，供日常复习而用</code></pre>



<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>[API文档](<a href="https://www.matools.com/api/java8">Java 8 中文版 - 在线API中文手册 - 码工具 (matools.com)</a>)</p>
<h3 id="1-关于计算机的基础知识"><a href="#1-关于计算机的基础知识" class="headerlink" title="1.关于计算机的基础知识"></a>1.关于计算机的基础知识</h3><ol>
<li>硬件及冯·诺依曼结构</li>
</ol>
<p><img src="https://p1.ssl.qhimg.com/t017835188ec7e2f9b9.png" alt="结构图" loading="lazy"></p>
<ol start="2">
<li><p>计算机软件</p>
</li>
<li><p>计算机软件可以使计算机按照事先约定好的顺序完成特定的功能</p>
<p>计算机软件是操作计算机硬件</p>
<p>按功能可分为系统软件和应用软件</p>
</li>
</ol>
<h3 id="2-计算机快捷键"><a href="#2-计算机快捷键" class="headerlink" title="2. 计算机快捷键"></a>2. 计算机快捷键</h3><p>CTRL + C ：复制</p>
<p>CTRL + V ：粘贴</p>
<p>CTRL + A ：全选</p>
<p>CTRL + X ：剪切</p>
<p>CTRL + X ：撤销</p>
<p>CTRL + S ：保存</p>
<p>Alt + F4 ：关闭当前窗口</p>
<p>CTRL + shift + Esc ：打开任务管理器</p>
<p>shift + delete ：删除文件</p>
<p>Alt + tab ：切换界面</p>
<h3 id="3-打开cmd"><a href="#3-打开cmd" class="headerlink" title="3. 打开cmd"></a>3. 打开cmd</h3><p>常用的dos命令</p>
<pre class="language-dos" data-language="dos"><code class="language-dos">通过&#x2F;d实现跨盘符的切换
#盘符切换					cd D:	|| 	 cd &#x2F;d d:		(change directory)
#查看当前目录下的所有文件	   dir
#切换目录					cd+当前目录下的文件路径
#返回上一级目录			  cd ..
#清理屏幕					cls (clear screen)
#退出终端					exit
#显示IP地址					ipconfig

#打开应用
	calc (打开计算器)

    mspaint(打开画图软件)

    notepad(打开记事本)
    
#ping 命令
	ping www.baidu.com	得到百度的IP地址
	
#文件操作
	md(make directory) text		创建目录
	rd(remove diretory) text	移除目录
	cd&gt;文件名					  创建文件
	del 文件名 				  删除文件</code></pre>

<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><p>学习过程中推荐<a href="https://tool.oschina.net/">Java API文档</a></p>
<h3 id="1-面向对象开发方法的一些核心思想与概念"><a href="#1-面向对象开发方法的一些核心思想与概念" class="headerlink" title="1. 面向对象开发方法的一些核心思想与概念"></a>1. 面向对象开发方法的一些核心思想与概念</h3><hr>
<p>​    面向对象分析与设计</p>
<ul>
<li><p>建立模拟问题领域的对象模型</p>
</li>
<li><p>自底向上的抽象</p>
<ol>
<li>把问题领域中的事物抽象为具有特定<strong>属性</strong>和<strong>行为</strong>的对象</li>
<li>把具有相同<strong>属性</strong>和<strong>行为</strong>的对象抽象为类</li>
<li>将具有共性的类的共性抽象到父类</li>
</ol>
</li>
<li><p>自顶向下的分解</p>
<p>对象（Object）</p>
<p>类（Class）和类型（Type）</p>
<p>消息（Message）和服务（Service）</p>
<p>接口（Interface）</p>
<p>抽象（Abstract）</p>
<p>封装（Encapsulation）</p>
<p>继承（Inheritance）</p>
<p>多态（Polymorphism）</p>
</li>
</ul>
<h3 id="2-java-入门"><a href="#2-java-入门" class="headerlink" title="2. java 入门"></a>2. java 入门</h3><hr>
<h4 id="2-1-java注释"><a href="#2-1-java注释" class="headerlink" title="2.1 java注释"></a>2.1 java注释</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//注释内容			单行注释	ctrl+/ 可进行多行的单行注释</span>
<span class="token comment">/*注释内容*/</span>		多行注释</code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 *@auther 	作者名
 *@version	版本号
 *@since	指明需要最早使用的jdk版本
 *@param	参数名
 *@return	返回值情况
 *@throws	异常抛出情况
 *
 */</span>			<span class="token class-name">JavaDoc</span><span class="token operator">:</span>文档注释<span class="token punctuation">(</span><span class="token comment">/**+回车)
 加在类上面就是类的注释，加在方法上面就是方法的注释</span></code></pre>

<p> 用命令行创建JavaDoc文件<br> javadoc -encoding(编码) UTF-8 -charset(字符集编码) UTF-8  java文件     //多显示一点中文</p>
<blockquote>
<p>tips:    使用IDEA生成<a href="https://www.cnblogs.com/orint/p/14452218.html#:~">javadoc文档</a></p>
</blockquote>
<h4 id="2-2-标识符"><a href="#2-2-标识符" class="headerlink" title="2.2 标识符"></a>2.2 标识符</h4><p>Java所有的组成部分都需要名字。类名，变量名以及方法名</p>
<p>所有的标识符都应该以字母(A<del>Z或者a</del>z)，美元符($)，或者下划线(_)开始</p>
<p>不能使用关键字作为变量名或者方法</p>
<p>标识符是大小写敏感的</p>
<h4 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2.3 数据类型"></a>2.3 数据类型</h4><pre class="language-java" data-language="java"><code class="language-java">定义字符串：<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"abc"</span></code></pre>

<ul>
<li><p>基本数据类型</p>
<p>1位(byte)=8字节(bit)</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span> bit表示<span class="token number">1</span>位
<span class="token number">1</span> <span class="token class-name">Byte</span>表示一个字节 <span class="token number">1</span>B<span class="token operator">=</span><span class="token number">8</span>b
<span class="token number">1024</span>B<span class="token operator">=</span><span class="token number">1</span>KB
<span class="token number">1024</span>KB<span class="token operator">=</span><span class="token number">1</span>MB
<span class="token number">1024</span>MB<span class="token operator">=</span><span class="token number">1</span>GB</code></pre>



<table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">默认值</th>
<th align="center">字节数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center">0</td>
<td align="center">1byte</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">0</td>
<td align="center">2byte</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">0</td>
<td align="center">4byte</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">0L</td>
<td align="center">8byte</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">0.0f</td>
<td align="center">4byte</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">0.0d</td>
<td align="center">8byte</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">‘\u0000’</td>
<td align="center">2byte</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">1byte</td>
</tr>
</tbody></table>
<p>long数据类型和float类型定义</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">1234L</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> j <span class="token operator">=</span> <span class="token number">123.3f</span><span class="token punctuation">;</span></code></pre>

<p>数据类型扩展</p>
<pre class="language-java" data-language="java"><code class="language-java">整数：		进制		二进制<span class="token number">0</span>b		十进制		八进制<span class="token number">0</span>	十六进制<span class="token number">0</span>x
<span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">010</span><span class="token punctuation">;</span>	<span class="token comment">//八进制0</span>
<span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">;</span>	<span class="token comment">//十六进制0x	0~9 A~F 16</span>

浮点数：有限		离散		舍入误差	大约		接近但不等于
    <span class="token punctuation">(</span>最好完全避免使用浮点数进行比较<span class="token punctuation">)</span>
    银行业务使用<span class="token class-name">BigDecimal</span>	数学工具类
    
字符类型	<span class="token punctuation">(</span>所有的字符本质还是数字<span class="token punctuation">)</span><span class="token punctuation">(</span>编码使用 <span class="token class-name">Unicode</span> <span class="token number">2</span>字节 <span class="token number">0</span><span class="token operator">~</span><span class="token number">65536</span><span class="token punctuation">)</span>
  <span class="token keyword">char</span> c1<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> c2<span class="token operator">=</span><span class="token string">'中'</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//强制类型转换</span>

转移字符
    <span class="token comment">// \t 制表符</span>
    <span class="token comment">// \n 换行符</span></code></pre></li>
<li><p>引用数据类型</p>
<ol>
<li>类</li>
<li>接口</li>
<li>数组</li>
</ol>
</li>
</ul>
<h4 id="2-4-变量作用域"><a href="#2-4-变量作用域" class="headerlink" title="2.4 变量作用域"></a>2.4 变量作用域</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Variable</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>					<span class="token comment">//类变量   static；从属于类</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>		<span class="token comment">//实例变量；从属于对象；如果不进行初始化，则变成这个类型的默认值；除了基本数据类型，其余的默认都是NULL</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>			<span class="token comment">//局部变量；必须声明和初始化值</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>常量初始化后不能再改变的值</p>
<p>常量名一般使用大写字母</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> 常量名<span class="token operator">=</span>值；
<span class="token keyword">final</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span>

<span class="token keyword">final</span>在类加载时只进行一次初始化，在类内部的值也不再改变
<span class="token keyword">static</span>意思是静态，在类加载时完成，在一个类里面只有一个值，在类的内部可以修改多次</code></pre>

<h4 id="2-5-自增自减"><a href="#2-5-自增自减" class="headerlink" title="2.5 自增自减"></a>2.5 自增自减</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span>		执行完这行代码后，先给b赋值，再<span class="token operator">++</span>
<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>		执行完这行代码前，先<span class="token operator">++</span>，再给b赋值</code></pre>

<h4 id="2-6-位运算-了解"><a href="#2-6-位运算-了解" class="headerlink" title="2.6 位运算(了解)"></a>2.6 位运算(了解)</h4><pre class="language-Java" data-language="Java"><code class="language-Java">A &#x3D; 0011 1100
B &#x3D; 0000 1101
    
A&amp;B &#x3D; 0000 1100		(上下比较，两个都为1，才为1，否则为0)
A|B &#x3D; 0011 1101		(上下比较，都为0结果才为0，否则为1)
A^B &#x3D; 0011 0001		(相同为0，否则为1)
~B  &#x3D; 1111 0010		(与B完全相反)
    
&lt;&lt;  左移	*2		2&lt;&lt;3	16
&gt;&gt;  右移	&#x2F;2
    0000 0010    2
    0001 0000    16</code></pre>

<h4 id="2-7-字符串连接符"><a href="#2-7-字符串连接符" class="headerlink" title="2.7 字符串连接符   (+)"></a>2.7 字符串连接符   (+)</h4><p>“+”号运算符两侧，只要出现String类型，如果另一侧不是字符串，则会将其转换为字符串再连接起来</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>		字符串在前面，直接进行拼接
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		字符串在后面，a<span class="token operator">+</span>b先进行计算，再拼接</code></pre>

<h4 id="2-8-三元运算符"><a href="#2-8-三元运算符" class="headerlink" title="2.8 三元运算符"></a>2.8 三元运算符</h4><pre class="language-java" data-language="java"><code class="language-java">x <span class="token operator">?</span> y <span class="token operator">:</span> z 		<span class="token comment">//如果x==true,则结果为y,否则为z</span></code></pre>

<h4 id="2-9-包机制"><a href="#2-9-包机制" class="headerlink" title="2.9 包机制"></a>2.9 包机制</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">pkg1<span class="token punctuation">.</span>pkg2<span class="token punctuation">.</span>pkg3</span>
一般利用公司域名的倒置作为包名
such<span class="token operator">:</span> <span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>www</span>

<span class="token keyword">import</span> 包的路径		<span class="token comment">//导入包</span></code></pre>

<h4 id="2-10-switch多选择结构"><a href="#2-10-switch多选择结构" class="headerlink" title="2.10 switch多选择结构"></a>2.10 switch多选择结构</h4><pre class="language-Java" data-language="Java"><code class="language-Java">switch(变量类型)		&#x2F;&#x2F;变量类型可以是byte,short,int,char,String类型
&#123;
        &#x2F;&#x2F;case穿透，不写case会一直执行下面的语句直到遇到case
	case value:			&#x2F;&#x2F;case标签必须是字符串常量或字面量
	&#x2F;&#x2F;语句
	break;&#x2F;&#x2F;可选
	case value:
	&#x2F;&#x2F;语句
	break;&#x2F;&#x2F;可选
	default：&#x2F;&#x2F;可选
		&#x2F;&#x2F;语句
&#125;</code></pre>

<h4 id="2-11-break和continue"><a href="#2-11-break和continue" class="headerlink" title="2.11 break和continue"></a>2.11 break和continue</h4><pre class="language-Java" data-language="Java"><code class="language-Java">break ：强行退出循环，不执行循环中剩余的语句
continue ： 用于终止某次循环过程，跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定</code></pre>

<h4 id="2-12-打印三角形"><a href="#2-12-打印三角形" class="headerlink" title="2.12 打印三角形"></a>2.12 打印三角形</h4><pre class="language-Java" data-language="Java"><code class="language-Java">public class Main &#123;
    public static void main(String[] args) &#123;
        for(int i&#x3D;1;i&lt;&#x3D;5;i++)&#123;
            for(int j&#x3D;5;j&gt;i;j--)&#123;
                System.out.print(&quot; &quot;);
            &#125;
            for(int j&#x3D;1;j&lt;&#x3D;i;j++)&#123;
                System.out.print(&quot;*&quot;);
            &#125;
            for(int j&#x3D;1;j&lt;i;j++)&#123;
                System.out.print(&quot;*&quot;);
            &#125;
            System.out.println();
        &#125;
    &#125;
&#125;
</code></pre>

<h4 id="2-13-方法"><a href="#2-13-方法" class="headerlink" title="2.13 方法"></a>2.13 方法</h4><pre class="language-Java" data-language="Java"><code class="language-Java">System.out.println()	&#x2F;&#x2F;调用系统类中标准输出对象out的println方法
方法是语句的集合，它们在一起执行一个功能
    1. 方法包含于类或对象中
    2. 方法在程序中被创建，在其他地方被引用
    
方法的定义: 
	修饰符 返回类型 方法名 (参数类型 参数名)&#123;
        ···
        方法体
        ···
        return 返回值;   &#x2F;&#x2F;返回值  , 终止方法
    &#125;</code></pre>

<pre class="language-Java" data-language="Java"><code class="language-Java">方法重载
	方法名称必须相同
    参数列表必须不同
    方法的返回类型可以相同也可以不同
    tips: 仅仅返回类型不同不足以成为方法的重载
        
方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配对应的方法
        
        Java传参为值传递</code></pre>

<h4 id="2-14-命令行传递参数"><a href="#2-14-命令行传递参数" class="headerlink" title="2.14 命令行传递参数"></a>2.14 命令行传递参数</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"args["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]: "</span><span class="token operator">+</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

javac 路径名    <span class="token comment">//编译为.class文件</span>
java 路径名 参数	 <span class="token comment">//注意要加上包的路径	</span>
such<span class="token operator">:</span>
	java <span class="token class-name"><span class="token namespace">h1<span class="token punctuation">.</span></span>Main</span> <span class="token keyword">this</span> is hh
        
result<span class="token operator">:</span>
args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token keyword">this</span>
args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span>is
args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">:</span>hh
    </code></pre>

<h4 id="2-15-可变参数"><a href="#2-15-可变参数" class="headerlink" title="2.15 可变参数"></a>2.15 可变参数</h4><pre class="language-java" data-language="java"><code class="language-java">在方法的声明中，可在指定参数类型后面加一个省略号<span class="token punctuation">(</span>…<span class="token punctuation">)</span>
一个方法只能指定一个可变参数<span class="token punctuation">,</span>它必须是方法的最后一个参数<span class="token punctuation">,</span>任何普通参数必须在它之前声明
<span class="token comment">//本质上类似于命数组传参</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Demo04</span> demo04 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        demo04<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 		<span class="token comment">//类似于int类型的数组</span>
        
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h4 id="2-16-递归"><a href="#2-16-递归" class="headerlink" title="2.16 递归"></a>2.16 递归</h4><pre class="language-Java" data-language="Java"><code class="language-Java">递归结构包括两个部分：
	递归头：什么时候不带哦一年自身的方法，如果没有头，将陷入死循环
	递归体：什么时候需要调用自身的方法
    
    
理解：就是有个“递”和“归”的过程
    important ：明确这个函数的功能是什么</code></pre>

<h4 id="2-17-数组"><a href="#2-17-数组" class="headerlink" title="2.17 数组"></a>2.17 数组</h4><pre class="language-Java" data-language="Java"><code class="language-Java">数组定义：数组是相同类型数据的有序集合

&#x2F;&#x2F;变量的类型     变量的名字   &#x3D;    变量的值

数组也是对象,数组元素相当于对象的成员变量

数组的定义
    声明数组
int[] nums;		&#x2F;&#x2F;首选的方法
int nums2[];	&#x2F;&#x2F;效果相同，但不是首选方法

&#x2F;&#x2F;静态初始化
int[] a &#x3D; &#123;1,2,3,4,5,6,7,8&#125;;

	使用new来创建数组(开辟了一段空间)
&#x2F;&#x2F;动态初始化：包含默认初始化
int[] nums &#x3D; new int[arrysize];		&#x2F;&#x2F;这里面可以存放arrysize个int类型的数据
nums[0]&#x3D;10;

数组的元素是通过索引访问的，数组索引从0开始
    
    
 	二维数组
    int[] a &#x3D; &#123;1,2,3&#125;;
    int[][] nums&#x3D; &#123;&#123;1,2&#125;,&#123;2,3&#125;,&#123;3,4&#125;&#125;;
	实际上相当于将原来的一维数组的每一个数字嵌套</code></pre>

<p><img src="https://wx4.sinaimg.cn/mw690/0085Lngngy1gvua710489j30la0fst90.jpg" alt="二维数组图示" loading="lazy"></p>
<h4 id="2-18-Java内存分析"><a href="#2-18-Java内存分析" class="headerlink" title="2.18 Java内存分析"></a>2.18 Java内存分析</h4><pre class="language-Java" data-language="Java"><code class="language-Java">Java内存：
堆：
    存放new的对象和数组
    可以被所有的线程共享，不会存放到别的对象引用
    
栈：
    存放基本变量类型(会包含这个基本数据类型的具体数值)
    引用对象的变量(会存放这个引用在堆里面的具体地址)
    
方法区：
    可以被所有的线程共享
    包含了所有的class和static变量</code></pre>



<h4 id="2-19-for-each"><a href="#2-19-for-each" class="headerlink" title="2.19 for each"></a>2.19 for each</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//遍历数组中的所有元素</span>

<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span>
	<span class="token comment">//没有下标</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> array <span class="token operator">:</span> arrays<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span></code></pre>



<h3 id="3-类和对象"><a href="#3-类和对象" class="headerlink" title="3. 类和对象"></a>3. 类和对象</h3><p>以类的方式组织代码，以对象的方式封装数据</p>
<hr>
<h4 id="3-1-Scanner-对象"><a href="#3-1-Scanner-对象" class="headerlink" title="3.1 Scanner 对象"></a>3.1 Scanner 对象</h4><pre class="language-java" data-language="java"><code class="language-java">需要导入包：
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>
基本语法：
<span class="token class-name">Scanner</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//创建一个扫描器对象，用于接收键盘数据</span>
<span class="token class-name">Scanner</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//凡是属于IO流的类如果不关会一直占用资源</span>
<span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span>类的<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>与<span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法
<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法：
    对输入有效字符之前遇到的空白，<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法会将其自动去掉
    只有输入有效字符后才将后面输入的空白作为分隔符或者结束符
    不能得到带有空格的字符串
    
    若想输入一个字符，即可
    <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> c <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token operator">:</span> 
	该方法返回输入回车之前的所有字符，包括空格</code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//循环输入数据</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">double</span> x <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h4 id="3-2-一般类的组成"><a href="#3-2-一般类的组成" class="headerlink" title="3.2 一般类的组成"></a>3.2 一般类的组成</h4><pre class="language-Java" data-language="Java"><code class="language-Java">类是一个模板，对象是一个具体的实例
    类：
    	静态的属性    属性
    	动态的行为    方法
    
public class Student&#123;
    成员变量
方法：
    成员方法
    构造方法(构造器)
&#125;

static 可以修饰成员变量和成员方法，是和类一起加载的，static修饰的成员变量为类变量
没用static修饰的只有在类实例化之后才存在，static修饰的方法为静态方法
    
非静态方法只跟对象有关
    
this 当前对象的引用
    
    
匿名对象：在调用多次方法的时候，只能调用唯一一次		&#x2F;&#x2F;省略了对象名称
    	如果希望同一个对象调用多次方法，那么必须给对象起个名字</code></pre>

<h4 id="3-3-构造器"><a href="#3-3-构造器" class="headerlink" title="3.3 构造器"></a>3.3 构造器</h4><pre class="language-Java" data-language="Java"><code class="language-Java">构造器：
    1.和类名相同
    2.没有返回值
作用：
    1.new 本质在调用构造方法
    2.初始化对象的值
注意点：
    定义有参构造后，如果想使用无参构造，需要显示的定义一个无参的构造器
    每个类都会有默认构造器
    
alt + insert : 可生成一个构造器</code></pre>

<pre class="language-Java" data-language="Java"><code class="language-Java">子类new一个对象的同时也new了一个父类对象
super注意点：
    super调用父类构造器必须要在子类构造器的第一行
    super必须只能出现在子类的方法或者构造方法中
    super和this不能同时调用构造方法
    
super和this的不同：
    代表的对象不同：
    	this：本身调用这个对象
    	super：代表父类对象的引用
    前提：
    	this：没有继承也能使用
    	super：只能在继承条件下才可以使用 
    构造方法：
    	this() ：本类的构造
    	super()：父类的构造
    
public class Student extends Person&#123;    
    public Student()&#123;
 		super();	&#x2F;&#x2F;调用父类构造器
        System.out.println(&quot;构造器执行了&quot;);
	&#125;
&#125;

除了用对象引用来访问对象成员外，还可以直接使用创建的对象本身来引用对象成员，格式如下：
    new 类名().对象成员
    创建后只能访问其中某一个成员，不能像对象引用那样可以访问多个对象成员，在完成某一个对象成员的访问后，该对象就会变成垃圾对象</code></pre>





<h4 id="3-5-Java访问控制四个修饰符"><a href="#3-5-Java访问控制四个修饰符" class="headerlink" title="3.5 Java访问控制四个修饰符"></a>3.5 Java访问控制四个修饰符</h4><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">同一类中</th>
<th align="center">同一包中</th>
<th align="center">不同包子类</th>
<th align="center">全局范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">protected</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">default(一般都是默认)</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">private</td>
<td align="center">√</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
</tbody></table>
<p>tips ：default并不是关键字”default”,而是根本不写</p>
<h4 id="3-6-static"><a href="#3-6-static" class="headerlink" title="3.6 static"></a>3.6 static</h4><pre class="language-Java" data-language="Java"><code class="language-Java">static只执行一次，与类一起加载  </code></pre>



<h4 id="3-7-abstract"><a href="#3-7-abstract" class="headerlink" title="3.7 abstract"></a>3.7 abstract</h4><pre class="language-Java" data-language="Java"><code class="language-Java">抽象类的所有方法，继承了它的子类，都必须要实现它的抽象方法(除非那个子类也是抽象类)
    
    不能new抽象类，只能靠子类去实现它
    抽象类中可以写普通的类
    抽象方法必须要在抽象类中</code></pre>



<h4 id="3-8-接口"><a href="#3-8-接口" class="headerlink" title="3.8 接口"></a>3.8 接口</h4><pre class="language-Java" data-language="Java"><code class="language-Java">接口：只有方法的定义，没有方法体
    接口中的方法用public abstract修饰
    接口中作为常量时用public static final
    接口是更高级别的抽象，若不定义为常量，若有多个类实现该接口，其中一个类改变接口中的变量，其他类的也要跟着改变，容易
    
    
使用 interface 来定义接口
    implements 来实现接口
    
实现了接口的类，就需要重写接口中的方法
    接口可实现多继承
    
&#x2F;&#x2F;定义接口
public interface UserService&#123;
	[public] [static] [final] 常量类型 常量名 &#x3D; 常量值;
    [public] [abstract] 方法返回值类型 方法名 (参数列表);
    
    &#x2F;&#x2F;jdk 8之后
    &#x2F;&#x2F;在方法名前面加个 default 关键字即可实现默认方法
    [public] default 方法返回值类型 方法名()&#123;
        &#x2F;&#x2F;默认方法的方法体
    &#125;
    [public] static 方法返回值类型 方法名()&#123;
        &#x2F;&#x2F;静态方法(类方法)的方法名
    &#125;
&#125;

&#x2F;&#x2F;实现接口
public class Student implements UserService,TimeService&#123;
    
&#125;

静态方法可通过&quot;接口名.方法名&quot;
抽象方法和默认方法只能通过接口实现类的实例对象来调用
    
接口中不能含有静态代码块但含有静态方法，而抽象类可以有静态代码块和静态方法
    因为静态代码块中只含有表达式，而且接口是方法的集合体，这违背了它的基本原理
    
与抽象类相比，接口不能搞定的:
	抽象类能够定义非 static final 的属性(field),而接口不能。接口的属性都是static final的。
	抽象类能够定义非 public方法，而接口不能。接口的方法都是public的。
    
与接口相比，抽象类不能搞定的:
	接口可以多继承(实现)，而抽象类不能。抽象类只能单继承。</code></pre>

<p>tips: 当一个类实现接口时，如果这个类是抽象类，只需实现接口中的部分抽象方法即可，否则需要实现接口中所有抽象方法</p>
<pre class="language-Java" data-language="Java"><code class="language-Java">个人理解：
    非抽象类继承抽象类或者实现接口时，必须实现(重写)抽象类的所有抽象方法
    抽象类实现接口时，可以只实现(重写)接口中的部分抽象方法
    
    
    基于上述，我们可以这样做，当你只想实现接口中的个别方法（不是所有方法）时，你可以先写一个抽象类来实现该接口，并在抽象类中实现除了你想要的方法之外的所有方法（方法体为空）。接着再用你的类继承这个抽象类，这个类中就只用实现你需要的方法了，这样就可以达到你的需要了，我们也可以不用管其他方法具体怎么实现(因为我们用不到那些方法)</code></pre>



<h4 id="3-9-内部类"><a href="#3-9-内部类" class="headerlink" title="3.9 内部类"></a>3.9 内部类</h4><pre class="language-Java" data-language="Java"><code class="language-Java">内部类可获得外部类的私有属性

public class Outer&#123;
    private int id;
    public void out()&#123;
        System.out.println(&quot;这是外部类的方法&quot;);
    &#125;
    
    public class Inner&#123;
        public void in()&#123;
            System.out.println(&quot;这是内部类的方法&quot;);
        &#125;
    &#125;
&#125;


public static void main(String[] args)&#123;
    Outer outer &#x3D; new Outer();
    &#x2F;&#x2F;通过这个外部类来实例化内部类
    Outer.Inner inner &#x3D; outer.new Inner();
&#125;</code></pre>

<pre class="language-java" data-language="java"><code class="language-java">成员内部类
    成员内部类可以访问外部类中所有的成员，同时外部类也可以访问成员内部类的所有成员 
    
    创建内部类的具体语法格式如下：
    外部类名<span class="token punctuation">.</span>内部类名 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 外部类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> 内部类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//外.内</span>

	如果出现了重名现象，那么格式是，外部类名称<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>外部类成员变量名</code></pre>

<pre class="language-Java" data-language="Java"><code class="language-Java">局部内部类
    也叫方法内部类，定义在某个局部范围的类
    局部内部类可以访问外部类中所有成员，而只有当前所属的方法才能使用它，出了这个方法外面就不能用了
    
    如果希望访问所在方法的局部变量，那么这个局部变量必须是 final 修饰的
    
    备注：从Java 8开始，只要局部变量事实不变，那么 final 关键字可以省略
    
    原因：
    1.new出来的对象放在堆内存当中
    2.局部变量是跟着方法走的，在栈内存当中
    3.方法运行结束之后，立刻出栈，局部变量就会跟着消失
    4.但是new出来的对象会在堆中持续存在，直到垃圾回收消失</code></pre>

<pre class="language-Java" data-language="Java"><code class="language-Java">静态内部类
    只能访问外部类的静态成员，同时通过外部类访问内部类成员时，可以跳过外部类直接通过内部类访问静态内部类成员
    创建静态内部类对象的基本语法格式如下：
    外部类名.静态内部类名 变量名 &#x3D; new 外部类名.静态内部类名</code></pre>

<pre class="language-Java" data-language="Java"><code class="language-Java">匿名内部类				&#x2F;&#x2F;省略了实现类&#x2F;子类名称
    适合创建后只使用一次的类，创建匿名内部类时须继承一个已有的父类或者实现一个接口
    
    匿名内本身无名，创建时不存在构造方法，不能重复使用
&#x2F;&#x2F;父类&#x2F;接口构造方法 + 类体 &#x3D; 匿名内部类
匿名内部类的定义格式
接口名称 对象名 &#x3D; new 接口名称()&#123;		&#x2F;&#x2F;这里的new可理解为创建了一个匿名内部类对象
  	&#x2F;&#x2F;覆盖重写所有抽象方法  
&#125;;

&#x2F;&#x2F;使用了匿名内部类，而且省略了对象名称，也是匿名对象
new 接口名称()&#123;
  	&#x2F;&#x2F;覆盖重写所有抽象方法  
&#125;;



&#x2F;&#x2F;定义一个接口
public interface MyInterface &#123;
    void method();
&#125;

&#x2F;&#x2F;接口实现类
public class MyInterfaceImpl implements MyInterface&#123;
    @Override
    public void method() &#123;
        System.out.println(&quot;匿名内部类实现了方法&quot;);
    &#125;
    
&#125;

public class DemoMain &#123;
    public static void main(String[] args) &#123;
        &#x2F;&#x2F;使用匿名内部类
        MyInterface obj &#x3D; new MyInterface() &#123;		&#x2F;&#x2F;MyInterface是接口名称，表明匿名内部类实现该接口
            @Override								&#x2F;&#x2F;&#123; &#125;之间的内容就是接口实现类中的内容	
            public void method() &#123;
                System.out.println(&quot;匿名内部类实现了方法&quot;);
            &#125;
        &#125;;
    &#125;
&#125;</code></pre>

<h4 id="3-10-包装类"><a href="#3-10-包装类" class="headerlink" title="3.10 包装类"></a>3.10 包装类</h4><pre class="language-Java" data-language="Java"><code class="language-Java">基本类型也字符串类型之间的相互转换
基本类型-&gt;字符串(String)
    1.基本类型的值+&quot;&quot;   最简单的方法(工作中常用)
    	int i1 &#x3D; 100;
		String s1 &#x3D; i1 + &quot;&quot;;
		System.out.println(s1 + 200);	&#x2F;&#x2F;100200
    
    2.包装类的静态方法toString(参数),是Object类toString方法的重载
    	static String toString(int i) 返回一个表示指定整数的String对象
        
        String s2 &#x3D; Integer.toString(100);
		System.out.println(s2 + 200);	&#x2F;&#x2F;100200

    3.String 类的静态方法valueOf(参数)
    	static String valueOf(int i) 返回int参数的字符串表示形式
        
        String s3 &#x3D; String.valueOf(100);
		System.out.println(s3 + 200);	&#x2F;&#x2F;100200
    
字符串(String)-&gt;基本类型
    使用包装类的静态方法parseXXX(&quot;字符串&quot;);
		Integer 类：static int parseInt(String s)
        Double  类：static double parseDouble(String s)
            
自动装箱和自动拆箱可使运算更加方便</code></pre>



<h3 id="4-常用类"><a href="#4-常用类" class="headerlink" title="4. 常用类"></a>4. 常用类</h3><hr>
<h4 id="4-1-Arrays类-数组的工具类"><a href="#4-1-Arrays类-数组的工具类" class="headerlink" title="4.1 Arrays类(数组的工具类)"></a>4.1 Arrays类(数组的工具类)</h4><pre class="language-Java" data-language="Java"><code class="language-Java">方法均为static修饰，使用时可直接使用类名进行调用
toString 方法 		打印出数组的所有元素
sort方法				升序排列</code></pre>

<h4 id="4-2-Random类"><a href="#4-2-Random类" class="headerlink" title="4.2 Random类"></a>4.2 Random类</h4><pre class="language-Java" data-language="Java"><code class="language-Java">1. 导包
    import java.util.Random
    
2. 创建
    Random r &#x3D; new Random();&#x2F;&#x2F;小括号中留空即可
    
3. 使用
    获取一个随机的int数字(范围是int所有范围，有正负两种)，int num &#x3D; r.nextInt();
	获取一个随机的int数字(参数代表了范围，左闭右开区间)，int num &#x3D; r.nextInt(3);
	实际上代表的含义是[0,3),也就是0~2
              
    若想获取[1.n]
        可用int num &#x3D; r.nextInt(n)+1;</code></pre>



<h3 id="5-Java三大特性"><a href="#5-Java三大特性" class="headerlink" title="5. Java三大特性"></a>5. Java三大特性</h3><hr>
<h4 id="5-1-封装"><a href="#5-1-封装" class="headerlink" title="5.1 封装"></a>5.1 封装</h4><pre class="language-Java" data-language="Java"><code class="language-Java">程序设计应当追求&quot;高内聚，低耦合&quot;
    高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；
    低耦合：仅暴露少量的方法给外部使用</code></pre>

<pre class="language-Java" data-language="Java"><code class="language-Java">封装(数据的隐藏)：
    通常下禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这这称为信息隐藏
    
    属性私有，通过getter和setter方法来进行属性值的更改
    
意义：
    1.提高程序的安全性，保护数据
    2.隐藏代码的实现细节
    3.统一接口
    4.提高系统可维护性</code></pre>

<h4 id="5-2-继承"><a href="#5-2-继承" class="headerlink" title="5.2 继承"></a>5.2 继承</h4><pre class="language-Java" data-language="Java"><code class="language-Java">继承本质是对某一批类的抽象，从而实现对现实世界更好的建模
    是类和类之间的一种关系
    
extends意思是扩展，子类是父类的扩展
    

&#x2F;&#x2F;父类
public class Animal&#123;
    
&#125;

&#x2F;&#x2F;派生类或子类
public class dog extends Animal&#123;
    
&#125;</code></pre>

<pre class="language-Java" data-language="Java"><code class="language-Java">子类继承了父类，就会拥有父类的全部方法
    
ctrl + H 显示继承类的关系图</code></pre>

<p>tips: Java类中只有单继承，没有多继承 </p>
<pre class="language-Java" data-language="Java"><code class="language-Java">方法重写
    
    静态方法由static修饰，只与类有关
    非静态方法与对象有关，与类无关
    
   &#x2F;&#x2F;父类
public class Animal&#123;
    public void test()&#123;
        System.out.println(&quot;这是父类&quot;);
    &#125;
&#125;

&#x2F;&#x2F;派生类或子类
public class dog extends Animal&#123;
    &#x2F;&#x2F;Override  重写
    System.out.println(&quot;这是子类&quot;);
&#125;


重写需要有继承关系，子类重写父类的方法！
    1. 方法名必须相同
    2. 参数列表必须相同
    3. 修饰符：范围可以扩大，但不能缩小
    4. 抛出的异常：范围可以缩小，不能扩大
    
为什么需要重写：
    父类的功能，子类不一定需要，或者不一定满足</code></pre>

<p>tips:</p>
<pre class="language-java" data-language="java"><code class="language-java">对于继承关系，新建一个子类对象时，都是先创建一个父类对象，在创建子类对象
若父类只有有参的构造方法，则子类必须要显示定义一个有参的构造方法</code></pre>



<h4 id="5-3-多态"><a href="#5-3-多态" class="headerlink" title="5.3 多态"></a>5.3 多态</h4><pre class="language-Java" data-language="Java"><code class="language-Java">多态：同一方法可以根据发送对象的不同而采用多种不同的行为方式
    1.多态时方法的多态，属性没有多态
    2.父类和子类有联系
    3.存在继承关系，方法需要重写，父类引用指向子类对象
    
instanceof关键字，如果匹配，则可以进行类型之间的转换
       &#x2F;&#x2F;父类
public class Animal&#123;
    public void test()&#123;
        System.out.println(&quot;这是父类&quot;);
    &#125;
&#125;

&#x2F;&#x2F;派生类或子类
public class dog extends Animal&#123;
    &#x2F;&#x2F;Override  重写
    System.out.println(&quot;这是子类&quot;);
&#125;

Animal animal &#x3D; new dog();</code></pre>



<p>tips:以下修饰符修饰的子类不能重写：</p>
<pre class="language-Java" data-language="Java"><code class="language-Java">1.static 方法：属于类，它不属于实例
   2.final 常量
   3.private 方法</code></pre>

<pre class="language-Java" data-language="Java"><code class="language-Java">对象类型的转换：
   &#x2F;&#x2F;上转型对象(将子类对象当作父类类型来使用)
   &#x2F;**
    * 此时不能通过父类对象去调用子类特有的方法，不能操作子类新增加的成员变量(较子类失去一些属性和功能)
    * 上转型对象可以操纵父类原有的属性和功能，无论这些方法是否被重写
    * 上转型对象调用方法时，就是调用子类继承和重写过的方法
    *&#x2F;
abstract class Animal&#123;
    
&#125;

class Cat extends Animal&#123;
    
&#125;

class Dog extends Animal&#123;
    
&#125;

Animal an1 &#x3D; new Dog();		&#x2F;&#x2F;将Dog类当作Animal类来使用
Animal an2 &#x3D; new Cat();		&#x2F;&#x2F;将Cat类当作Animal类来使用

&#x2F;&#x2F;下转型对象
&#x2F;&#x2F;将本质为Dog类型的an1对象由Animal类型向下转型为Dog,就可以使用Dog类型的所有属性和方法</code></pre>

<p>关键字instanceof</p>
<pre class="language-java" data-language="java"><code class="language-java">语法格式：
    对象<span class="token punctuation">(</span>或者对象引用变量<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> 类<span class="token punctuation">(</span>或接口<span class="token punctuation">)</span>
    
    <span class="token class-name">Animal</span> an1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>an1 <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>		<span class="token comment">//判断an1本质类型</span>
        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span>an1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该类型的对象不是Cat类型!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         
    <span class="token punctuation">&#125;</span></code></pre>



<h3 id="6-异常"><a href="#6-异常" class="headerlink" title="6.异常"></a>6.异常</h3><hr>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Throwable</span>是所有异常的超类
<span class="token class-name">Exception</span> 受检查异常，非运行时异常
<span class="token class-name">RuntimeException</span>  非受检查异常，运行时异常
   
异常处理机制
<span class="token keyword">try</span><span class="token punctuation">&#123;</span>	<span class="token comment">//try监控区域</span>
    
<span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">&#123;</span>		<span class="token comment">//捕获异常</span>
    
<span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>	<span class="token comment">//处理善后工作，程序必定会执行</span>
    
<span class="token punctuation">&#125;</span>

如果要捕获多个异常，从小范围到大范围
    
快捷生成 <span class="token class-name">Ctrl</span> <span class="token operator">+</span> <span class="token class-name">Alt</span> <span class="token operator">+</span> <span class="token class-name">T</span>
    
<span class="token comment">//假设在这方法中，处理不了这个异常，方法上抛出异常</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//主动抛出的异常，一般在方法中使用</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h3 id="7-泛型"><a href="#7-泛型" class="headerlink" title="7. 泛型"></a>7. 泛型</h3><pre class="language-Java" data-language="Java"><code class="language-Java">泛型提供了编译时类型安全监测机制，允许我们在编译时检测到非法的类型数据结构</code></pre>





<h2 id="Java进阶"><a href="#Java进阶" class="headerlink" title="Java进阶"></a>Java进阶</h2><hr>
<h3 id="1-集合和对象数组"><a href="#1-集合和对象数组" class="headerlink" title="1.集合和对象数组"></a>1.集合和对象数组</h3><hr>
<h4 id="1-1-集合"><a href="#1-1-集合" class="headerlink" title="1.1 集合"></a>1.1 集合</h4><pre class="language-Java" data-language="Java"><code class="language-Java">Collection接口(元素是孤立存在的,单列集合)
    List接口和Set接口的父接口
    定义的是所有单列集合中共性的方法
    所有单列集合都可以使用共性的方法
    没有带索引的方法
    

List 接口
    1.有序的集合(存储和取出元素顺序相同)
    2.允许存储重复的元素
    3.有索引，可以使用普通的for循环遍历
    实现类：
    	1.Vector集合
    	2.ArrayList集合
    	3.LinkedList集合
    
Set接口
    1. 不允许存储重复元素
    2.没有索引(不能使用普通的for循环遍历)
    实现类：
    	1.TreeSet集合
    	2.HashSet集合
    
    
Map接口(元素是成对存在的,每个元素由键与值两部分组成,通过键可以找到对应的值)
    Map中的集合不能包含重复的键,值可以重复,每个键只能对应一个值
    </code></pre>



<h4 id="1-2-对象数组"><a href="#1-2-对象数组" class="headerlink" title="1.2 对象数组"></a>1.2 对象数组</h4><pre class="language-Java" data-language="Java"><code class="language-Java">定义一个数组来存储3个Person对象
    缺点：一旦创建，程序运行时期长度不可以发生改变

public class Person&#123;
    private String name;
    
    public String getName()&#123;
       return name;
    &#125;
&#125;

public static void main(String[] args)&#123;
    &#x2F;&#x2F;首先创建一个长度为3的数组，里面用来存放Person类型的对象
    Person[] array &#x3D;  new Person[3];
    
    Person one &#x3D; new Person();
    Person two &#x3D; new Person();
    Person three &#x3D; new Person();
    
    array[0] &#x3D; one;
    array[1] &#x3D; two;
    array[2] &#x3D; three;
    
    System.out.println(array[1].getName());
&#125;</code></pre>



<h4 id="1-3-ArrayList集合"><a href="#1-3-ArrayList集合" class="headerlink" title="1.3 ArrayList集合"></a>1.3 ArrayList集合</h4><pre class="language-Java" data-language="Java"><code class="language-Java">List接口的实现类
ArrayList集合的长度是可以随意变化的
    底层是数组，查询快，增删慢
对于ArrayList来说，有一个&lt;E&gt;代表泛型
    泛型，也就是装在集合当中的所有元素，全都是统一的什么类型
对于ArrayList集合来说，直接打印得到的不是地址值，而是内容，如果内容是空，得到的是空的中括号，[]
    
ArrayList&lt;String&gt; list &#x3D; new ArryList&lt;&gt;();


&#x2F;*
	ArrayList当中的常用方法：
	
	public boolean add(E e)，向集合中添加元素，参数的类型和泛型一致   &#x2F;&#x2F;返回值代表添加是否成功
	public E get(int index)，从集合中获取元素，参数是索引编号(即类似数组下标)，返回值为对应为对应位置的元素
	public E remove(int index)，从集合中删除元素，参数是索引编号(即类似数组下标)，返回值为被删除掉的元素
	public int size()，获取集合的尺寸长度，返回值是集合中包含的元素个数
*&#x2F;

如果希望想集合ArrayList当中存储基本类型，必须使用基本类型对应的包装类
    自动装箱：基本类型 -&gt; 包装类型
    自动拆箱：包装类型 -&gt; 基本类型</code></pre>

<h4 id="1-4-LinkedList"><a href="#1-4-LinkedList" class="headerlink" title="1.4 LinkedList"></a>1.4 LinkedList</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span>接口的实现类
底层由链表进行实现的
里面包括了大量操作首尾元素的方法
使用<span class="token class-name">LinkedList</span>集合特有的方法，不能使用多态

<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addFrist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span></code></pre>

<h4 id="1-5-Set接口"><a href="#1-5-Set接口" class="headerlink" title="1.5 Set接口"></a>1.5 Set接口</h4><pre class="language-Java" data-language="Java"><code class="language-Java">1.不允许存储重复的元素
2.没有索引，没有带索引的方法，也不能使用普通的for循环遍历
    
HashSet特点
    1.不允许存储重复的元素
	2.没有索引，没有带索引的方法，也不能使用普通的for循环遍历，可使用迭代器和增强for循环
    3.是一个无序的集合，存储元素和取出元素的顺序有可能不一致
    4.底层是一个哈希表结构(查询速度非常快)
    
    ArrayList&lt;String&gt; list &#x3D; new ArryList&lt;&gt;();
	Iterator&lt;String&gt; it &#x3D; list.iterator();</code></pre>

<h4 id="1-6-HashSet集合"><a href="#1-6-HashSet集合" class="headerlink" title="1.6 HashSet集合"></a>1.6 HashSet集合</h4><pre class="language-Java" data-language="Java"><code class="language-Java">哈希值：是一个十进制的整数，由系统随机给出，就是对象的地址，是一个逻辑地址，是模拟出来得到的地址，不是数据实际存储的物理地址
    
HashSet集合存储数据的结构(哈希表)		&#x2F;&#x2F;无序，不允许重复
    jdk1.8之前哈希表&#x3D;数组+链表
    jdk1.8之后：
    	哈希表&#x3D;数组+链表
    	哈希表&#x3D;数组+红黑树(提高查询效率)
    
    LinkedHashSet					&#x2F;&#x2F;有序，不允许重复</code></pre>

<h4 id="1-7-Collections类"><a href="#1-7-Collections类" class="headerlink" title="1.7 Collections类"></a>1.7 Collections类</h4><pre class="language-Java" data-language="Java"><code class="language-Java">集合工具类，用来对集合进行操作    
    public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T...elements);往集合中添加一些元素    
    public static void shuffle(List&lt;?&gt; list);                       打乱集合顺序    
    public static &lt;T&gt; vodi sort(List&lt;T&gt; list);                      将集合中元素按照默认规则进行排序(被排序的集合里边存储的元素,必须实现实现Comparable接口,重写了compareTo方法作为排序的规则)</code></pre>

<h4 id="1-8-红黑树-平衡排序树"><a href="#1-8-红黑树-平衡排序树" class="headerlink" title="1.8 红黑树(平衡排序树)"></a>1.8 红黑树(平衡排序树)</h4><pre class="language-Java" data-language="Java"><code class="language-Java">排序树：左子树小，右子树大
平衡树：左孩子和右孩子相等

约束：
    1.节点可以是红色或者黑色的
    2.根节点是黑色的
    3.叶子结点是黑色的
    4.每个红色的节点的子节点都是黑色的
    5.任何一个节点到其每一个叶子节点的所有路径上黑色节点数相同</code></pre>





<h3 id="2-Java多线程"><a href="#2-Java多线程" class="headerlink" title="2. Java多线程"></a>2. Java多线程</h3><pre class="language-java" data-language="java"><code class="language-java">程序：程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念
进程：执行程序的一次执行过程，它是一个动态的概念，是系统资源分配的单位

通常一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义，线程是CPU调度和执行的单位

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>称之为主线程，为系统的入口，用于执行整个程序
    线程开启不一定立即执行，</code></pre>

<p>tips: </p>
<pre class="language-Java" data-language="Java"><code class="language-Java">很多多线程是模拟出来的,真正的多线程是指有多个CPU，即多核，如服务器，如果是模拟出来的多线程，即在一个cpu的情况下，在同一个时间点，cpu只能执行一个代码，因为切换的很快，所有就有同时执行的错觉</code></pre>

<p><a href="https://wx2.sinaimg.cn/orj360/0085Lngnly1gwm0bfk83mj30v10iajz9.jpg">普通方法调用和多线程</a></p>
<h4 id="2-1-创建线程的方式"><a href="#2-1-创建线程的方式" class="headerlink" title="2.1 创建线程的方式"></a>2.1 创建线程的方式</h4><pre class="language-Java" data-language="Java"><code class="language-Java">三种创建方式
    Thread class		 继承Thread类(重点)
    Runnable 接口		    实现Runnable接口(重点)
    Callable 接口		    实现Callable(了解)
        
继承Thread类
        子类继承Thread类具备的多线程能力
        启动线程：子类对象.start()
        不建议使用：避免oop单继承的局限性
        
实行Runnable接口
        实现接口Runnable具有多线程能力
        启动线程：new Thread(实现类对象).start()
        推荐使用：避免单继承局限性，灵活方便，方便同一个对象被多个线程使用
        
多个线程共享一个资源，只需创建一个该资源对象</code></pre>

<h4 id="2-2-继承Thread类创建线程"><a href="#2-2-继承Thread类创建线程" class="headerlink" title="2.2 继承Thread类创建线程"></a>2.2 继承Thread类创建线程</h4><pre class="language-Java" data-language="Java"><code class="language-Java">创建线程方式一：继承Tread类，重写run()方法,调用start开启线程
    
public class TestThread1 extends Thread&#123;
    @Override
    public void run() &#123;
        &#x2F;&#x2F;run 方法线程体
        for (int i &#x3D; 0; i &lt; 20; i++) &#123;
            System.out.println(&quot;我在看代码---&quot;+i);
        &#125;
    &#125;

    public static void main(String[] args) &#123;
        &#x2F;&#x2F;main线程,主线程
        
        &#x2F;&#x2F;创建一个线程对象
        TestThread1 testThread1 &#x3D; new TestThread1();
        
        &#x2F;&#x2F;调用start方法
        teatThread1.start();
        
        
        for (int i &#x3D; 0; i &lt; 200; i++) &#123;
            System.out.println(&quot;我在学习多线程---&quot;+i);
        &#125;
    &#125;
&#125;

两条线程同时执行，交替执行的</code></pre>

<h4 id="2-3-网图的下载"><a href="#2-3-网图的下载" class="headerlink" title="2.3 网图的下载"></a>2.3 网图的下载</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//首先导入jar包</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TextThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">WecDownloader</span> wecDownloader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WecDownloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wecDownloader<span class="token punctuation">.</span><span class="token function">downloader</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token class-name">TextThread</span> textThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextThread</span><span class="token punctuation">(</span><span class="token string">"https://tse3-mm.cn.bing.net/th/id/OIP-C.s4LzOcaohmeW3Qkjwy153AHaFP?w=266&amp;h=188&amp;c=7&amp;r=0&amp;o=5&amp;dpr=1.5&amp;pid=1.7"</span><span class="token punctuation">,</span> <span class="token string">"1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        textThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">class</span> <span class="token class-name">WecDownloader</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downloader</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">copyURLToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IO异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>

<h4 id="2-4-实现Runnable接口-常用"><a href="#2-4-实现Runnable接口-常用" class="headerlink" title="2.4 实现Runnable接口(常用)"></a>2.4 实现Runnable接口(常用)</h4><pre class="language-java" data-language="java"><code class="language-java">适合于无返回值的方法
    避免了<span class="token class-name">Java</span>单继承带来的局限性，通过<span class="token class-name">Runnable</span>接口实现多线程
    
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TextThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">WecDownloader</span> wecDownloader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WecDownloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wecDownloader<span class="token punctuation">.</span><span class="token function">downloader</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token class-name">TextThread</span> textThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextThread</span><span class="token punctuation">(</span><span class="token string">"https://tse3-mm.cn.bing.net/th/id/OIP-C.s4LzOcaohmeW3Qkjwy153AHaFP?w=266&amp;h=188&amp;c=7&amp;r=0&amp;o=5&amp;dpr=1.5&amp;pid=1.7"</span><span class="token punctuation">,</span> <span class="token string">"1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>textThread<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//下载器</span>
<span class="token keyword">class</span> <span class="token class-name">WecDownloader</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downloader</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">copyURLToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IO异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>

<h4 id="2-5-实现Callable接口"><a href="#2-5-实现Callable接口" class="headerlink" title="2.5 实现Callable接口"></a>2.5 实现Callable接口</h4><pre class="language-java" data-language="java"><code class="language-java">适合于有返回值的方法，并抛出异常

    

<span class="token comment">//借助FutureTask执行</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token comment">//定义一个实现Callable接口的实现类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TextCallable</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">WecDownloader</span> wecDownloader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WecDownloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wecDownloader<span class="token punctuation">.</span><span class="token function">downloader</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>

        <span class="token comment">//创建Callable接口的实现类对象</span>
        <span class="token class-name">TextCallable</span> textCallable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextCallable</span><span class="token punctuation">(</span><span class="token string">"https://tse3-mm.cn.bing.net/th/id/OIP-C.s4LzOcaohmeW3Qkjwy153AHaFP?w=266&amp;h=188&amp;c=7&amp;r=0&amp;o=5&amp;dpr=1.5&amp;pid=1.7"</span><span class="token punctuation">,</span> <span class="token string">"1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//使用FutureTask封装Callable接口</span>
        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> ft1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>textCallable<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//使用Thread(Runnable target,String name)构造方法创建线程对象</span>
        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ft1<span class="token punctuation">,</span><span class="token string">"thread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//调用线程对象的start方法启动线程</span>
        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//可以通过FutureTask对象的方法管理返回值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread1返回结果:"</span><span class="token operator">+</span>ft1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">class</span> <span class="token class-name">WecDownloader</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downloader</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">copyURLToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IO异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>




<span class="token comment">//借助线程池来执行</span>
    
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token comment">//定义一个实现Callable接口的实现类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TextCallable</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Excepton</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">WecDownloader</span> wecDownloader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WecDownloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wecDownloader<span class="token punctuation">.</span><span class="token function">downloader</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>

        <span class="token class-name">TextCallable</span> textCallable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextCallable</span><span class="token punctuation">(</span><span class="token string">"https://tse3-mm.cn.bing.net/th/id/OIP-C.s4LzOcaohmeW3Qkjwy153AHaFP?w=266&amp;h=188&amp;c=7&amp;r=0&amp;o=5&amp;dpr=1.5&amp;pid=1.7"</span><span class="token punctuation">,</span> <span class="token string">"1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//创建执行服务</span>
        <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//提交执行</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> r1 <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>textCallable<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取结果</span>
        <span class="token keyword">boolean</span> rs1 <span class="token operator">=</span> r1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//关闭服务</span>
        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">class</span> <span class="token class-name">WecDownloader</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downloader</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">copyURLToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IO异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h4 id="2-6-Lambda表达式"><a href="#2-6-Lambda表达式" class="headerlink" title="2.6 Lambda表达式"></a>2.6 Lambda表达式</h4><pre class="language-Java" data-language="Java"><code class="language-Java">避免匿名内部类定义过多
可以让代码看起来更加简洁
去掉了一堆没有意义的代码，只留下了核心的逻辑
    
函数接口的定义：
    任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口
    对于函数式接口，我们可以通过lambda表达式来创建接口的对象</code></pre>

<pre class="language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;定义一个接口
public interface MyInterface &#123;
    void method();
&#125;

&#x2F;&#x2F;接口实现类
public class MyInterfaceImpl implements MyInterface&#123;
    @Override
    public void method() &#123;
        System.out.println(&quot;匿名内部类实现了方法&quot;);
    &#125;
    
&#125;



&#x2F;&#x2F;匿名内部类
MyInterface myinterface &#x3D; new MyInterface()&#123;
  	@Override
    public void method() &#123;
        System.out.println(&quot;匿名内部类实现了方法&quot;);
    &#125;
&#125;;



&#x2F;&#x2F;lambda表达式简化
MyInterface myinterface &#x3D; ()-&gt;&#123;
        System.out.println(&quot;匿名内部类实现了方法&quot;);
    &#125;;


&#x2F;&#x2F;有参数的lambda表达式
MyInterface myinterface &#x3D; (int a)-&gt;&#123;
        System.out.println(&quot;匿名内部类实现了方法&quot;+a);
    &#125;;

&#x2F;&#x2F;简化1：参数类型
MyInterface myinterface &#x3D; (a)-&gt;&#123;
        System.out.println(&quot;匿名内部类实现了方法&quot;+a);
    &#125;;

&#x2F;&#x2F;简化2：简化括号
MyInterface myinterface &#x3D; a-&gt;&#123;
        System.out.println(&quot;匿名内部类实现了方法&quot;+a);
    &#125;;

&#x2F;&#x2F;简化2：去掉花括号(前提是花括号里面只有一行代码，一般不常用)
MyInterface myinterface &#x3D; a-&gt;System.out.println(&quot;匿名内部类实现了方法&quot;+a);

总结：
    lambda表达式只能有一行代码的情况下才能简化成为一行，如果有多行，用代码块进行包裹
    前提是接口为函数式接口
    多个参数也可以去掉参数类型，要去掉就都去掉，必须加上括号</code></pre>

<h4 id="2-7-线程状态"><a href="#2-7-线程状态" class="headerlink" title="2.7 线程状态"></a>2.7 线程状态</h4><p><a href="https://wx4.sinaimg.cn/orj360/0085Lngnly1gwo5f8w4sfj311d0oxqb6.jpg">五大状态之间的关系图</a></p>
<h5 id="2-7-1-线程停止-stop"><a href="#2-7-1-线程停止-stop" class="headerlink" title="2.7.1 线程停止(stop)"></a>2.7.1 线程停止(stop)</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStop</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//线程中定义县城提使用的标识</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//线程体使用该标识</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run... Thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">//对外提供方法改变标识</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>

<h5 id="2-7-2-线程休眠-sleep"><a href="#2-7-2-线程休眠-sleep" class="headerlink" title="2.7.2 线程休眠(sleep)"></a>2.7.2 线程休眠(sleep)</h5><pre class="language-Java" data-language="Java"><code class="language-Java">sleep(时间)指定当前线程阻塞的毫秒数
sleep存在异常InterruptedException
sleep时间达到后线程进入就绪状态
sleep可以模拟网络延时，倒计时等
每一个对象都有一个锁，sleep不会释放锁</code></pre>

<h5 id="2-7-3-线程礼让-yield"><a href="#2-7-3-线程礼让-yield" class="headerlink" title="2.7.3 线程礼让(yield)"></a>2.7.3 线程礼让(yield)</h5><pre class="language-Java" data-language="Java"><code class="language-Java">礼让线程，让当前正在执行的线程暂停，但不阻塞
将线程从运行状态转为就绪状态
让cpu重新调度，礼让不一定成功，看cpu心情</code></pre>

<h5 id="2-7-4-线程强制执行-join"><a href="#2-7-4-线程强制执行-join" class="headerlink" title="2.7.4 线程强制执行(join)"></a>2.7.4 线程强制执行(join)</h5><pre class="language-java" data-language="java"><code class="language-java">join合并线程，待此线程执行完成后，再执行其他线性程，其他线程堵塞
可以想象成c</code></pre>

<h5 id="2-7-5-观测线程状态"><a href="#2-7-5-观测线程状态" class="headerlink" title="2.7.5 观测线程状态"></a>2.7.5 观测线程状态</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread<span class="token punctuation">.</span>State</span> state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h5 id="2-7-6-线程优先级"><a href="#2-7-6-线程优先级" class="headerlink" title="2.7.6 线程优先级"></a>2.7.6 线程优先级</h5><pre class="language-Java" data-language="Java"><code class="language-Java">Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行
    
优先级的设定在start()调度之前
线程优先级用数字表示，范围从1~10
    Thread.MIN_PRIORITY &#x3D; 1;
	Thread.MAX_PRIORITY &#x3D; 10;
	Thread.NORM_PRIORITY &#x3D; 5;

优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，这都是看CPU的调度
    
&#x2F;&#x2F;改变优先级
    对象名.setPriority(int xxx)
&#x2F;&#x2F;获取优先级
    对象名.getPriority()</code></pre>

<h5 id="2-7-7-守护线程"><a href="#2-7-7-守护线程" class="headerlink" title="2.7.7 守护线程"></a>2.7.7 守护线程</h5><pre class="language-Java" data-language="Java"><code class="language-Java">线程分为用户线程和守护线程
虚拟机必须确保用户线程执行完毕
虚拟机不用等待守护线程执行完毕
such:后台记录操作日志，监控内存，垃圾回收等待

&#x2F;&#x2F;上帝
class God implements Runnable&#123;
    @Override
    public void run()&#123;
        
    &#125;
&#125;

&#x2F;&#x2F;你
class You implements Runnable&#123;
    @Override
    public void run()&#123;
        
    &#125;
&#125;

public static void main(String argc)&#123;
    God god &#x3D; new God();
    You you &#x3D; new You();
    
    Thread thread &#x3D; new Thread(god);
    thread.setDaemon(true);		&#x2F;&#x2F;默认是false表示是用户线程，正常的线程都是用户线程
    
    thread.start();		&#x2F;&#x2F;上帝守护线程启动
    
    new Thread(you).start();		&#x2F;&#x2F;你 用户线程启动
&#125;</code></pre>

<h4 id="2-8-线程同步"><a href="#2-8-线程同步" class="headerlink" title="2.8 线程同步"></a>2.8 线程同步</h4><pre class="language-Java" data-language="Java"><code class="language-Java">并发：同一个对象被多个线程同时操作
    
处理多线程问题是，多个线程访问同一个对象，并且某些线程还想修改这个对象，这时候我们就需要线程同步。线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面线程使用完毕，下一个线程再使用
    
为了保证数据在方法中被访问的正确性，在访问时加入锁机制 synchronized(同步的)，当一个线程获得对象的排他锁，独占资源，其他线程必须等待，使用后释放锁即可。但存在以下问题
    1.一个线程持有锁会导致其他所有需要此锁的线程挂起
    2.在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题
    3.如果一个优先级高的线程等待一个优先级低的线程会释放锁，会导致优先级倒置，引起性能问题</code></pre>

<h4 id="2-9-同步方法和同步代码块"><a href="#2-9-同步方法和同步代码块" class="headerlink" title="2.9 同步方法和同步代码块"></a>2.9 同步方法和同步代码块</h4><pre class="language-java" data-language="java"><code class="language-java">每个对象对应一把锁
方法里面需要修改的内容才需要锁，锁的太多，浪费资源
    
锁的对象就是变化的量，需要增删改的对象
<span class="token comment">//同步方法</span>
<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span>

<span class="token comment">//同步代码快</span>
<span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span>
<span class="token class-name">Obj</span>称为同步监视器，推荐使用共享资源作为同步监视器
    
同步监视器的执行过程
    <span class="token number">1.</span>第一个线程访问，锁定同步监视器，执行其中的代码
    <span class="token number">2.</span>第二个线程访问，发现同步监视器被锁定，无法访问
    <span class="token number">3.</span>第一个线程访问完毕，解锁同步监视器
    <span class="token number">4.</span>第二个线程访问，发现同步监视器没有锁，然后锁定并访问</code></pre>

<h4 id="2-10-死锁"><a href="#2-10-死锁" class="headerlink" title="2.10 死锁"></a>2.10 死锁</h4><pre class="language-Java" data-language="Java"><code class="language-Java">产生死锁的四个必要条件：
    1.互斥条件：一个资源每次只能被一个进程使用
    2.请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放
    3.不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺
    4.循环等待条件：若干进程之间形成的一种头尾相接的循环等待资源关系</code></pre>

<h4 id="2-11-Lock-锁"><a href="#2-11-Lock-锁" class="headerlink" title="2.11 Lock(锁)"></a>2.11 Lock(锁)</h4><pre class="language-Java" data-language="Java"><code class="language-Java">synchronized和lock的对比
    Lock是显式锁(手动开启和关闭锁，别忘记关闭锁)，synchronized是隐式锁，出了作用域自动释放
    Lock只有代码块锁,synchronized有代码块锁和方法锁
    使用Lock锁，JVM将花费更少的时间来调度线程，性能更好，并有更好的扩展性(提供更多的子类)
    优先使用顺序：
    Lock &gt; 同步代码块(已经进入了方法体，分配了相应的资源) &gt; 同步方法(在方法体之外)

ReentrantLock(可重入锁)
    
class A&#123;
    private final ReentrantLock lock &#x3D; new ReentrantLock();
    public void m()&#123;
        lock.lock();			&#x2F;&#x2F;加锁
        try&#123;
            &#x2F;&#x2F;保证线程安全的代码
        &#125;finally&#123;
            lock.unlock();		&#x2F;&#x2F;解锁
            &#x2F;&#x2F;如果同步代码有异常，要将unlock()写入finally语句块
        &#125;
    &#125;
&#125;</code></pre>

<h4 id="2-12-线程通信"><a href="#2-12-线程通信" class="headerlink" title="2.12 线程通信"></a>2.12 线程通信</h4><pre class="language-Java" data-language="Java"><code class="language-Java">Java提供了几个方法来解决线程之间的通信问题(Object类中的方法，只能在同步方法或者同步代码块中使用)
    wait()			表示线程会一直等待，直到其他线程通知，与sleep不同，会释放锁
    wait(long timeout)		指定等待的毫秒数
    notify()		唤醒一个处于等待状态的线程
    notifyAll()		唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</code></pre>

<p>并发协作模型”生产者/消费者模式”</p>
<pre class="language-Java" data-language="Java"><code class="language-Java">管程法(l)

生产者：负责生产数据的模块(可能是方法，对象，线程，进程)
消费者：负责处理数据的模块(可能是方法，对象，线程，进程)
缓冲区：消费者不能直接使用生产者的数据，它们之间有个&quot;缓冲区&quot;
    
生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据 </code></pre>

<pre class="language-Java" data-language="Java"><code class="language-Java">public class Text &#123;
    public static void main(String[] args) &#123;
        SyContainer container &#x3D; new SyContainer();

        new Productor(container).start();
        new Customer(container).start();
    &#125;

&#125;

&#x2F;&#x2F;生产者
class Productor extends Thread&#123;
    SyContainer container;

    public Productor(SyContainer container)&#123;
        this.container &#x3D; container;
    &#125;
    @Override
    public void run() &#123;
        for (int i &#x3D; 1; i &lt;&#x3D; 100; i++) &#123;
            container.push(new Chicken(i));
            System.out.println(&quot;生产了&quot;+i+&quot;只鸡&quot;);
        &#125;
    &#125;
&#125;

&#x2F;&#x2F;消费者
class Customer extends Thread&#123;
    SyContainer container;

    public Customer(SyContainer container)&#123;
        this.container &#x3D; container;
    &#125;
    @Override
    public void run() &#123;
        for (int i &#x3D; 0; i &lt; 100; i++) &#123;
            System.out.println(&quot;消费了--&gt;&quot;+container.pop().id+&quot;只鸡&quot;);
        &#125;
    &#125;
&#125;

class Chicken&#123;
    int id;
    public Chicken(int id)&#123;
        this.id &#x3D; id;
    &#125;
&#125;

&#x2F;&#x2F;缓冲区
class SyContainer&#123;
    Chicken[] chickens &#x3D; new Chicken[10];

    int count &#x3D; 0;
    &#x2F;&#x2F;生产者放入产品
    public synchronized void push(Chicken chicken)&#123;
        if(count &#x3D;&#x3D; chickens.length) &#123;
            &#x2F;&#x2F;等待消费
            try &#123;
                this.wait();
            &#125; catch (InterruptedException e) &#123;
                e.printStackTrace();
            &#125;
        &#125;
            chickens[count] &#x3D; chicken;
            count++;
            this.notifyAll();

    &#125;
    &#x2F;&#x2F;消费者使用产品
    public synchronized Chicken pop()&#123;
        if(count &#x3D;&#x3D; 0)&#123;
            &#x2F;&#x2F;通知生产者生产
            try &#123;
                this.wait();
            &#125; catch (InterruptedException e) &#123;
                e.printStackTrace();
            &#125;
        &#125;
        count --;
        Chicken chicken &#x3D; chickens[count];
        this.notifyAll();
        return chicken;
    &#125;

&#125;</code></pre>



<pre class="language-Java" data-language="Java"><code class="language-Java">信号灯法
    </code></pre>





<h3 id="3-Java-I-O流"><a href="#3-Java-I-O流" class="headerlink" title="3. Java I/O流"></a>3. Java I/O流</h3><hr>
<h4 id="3-1-输入流和输出流"><a href="#3-1-输入流和输出流" class="headerlink" title="3.1 输入流和输出流"></a>3.1 输入流和输出流</h4><pre class="language-Java" data-language="Java"><code class="language-Java">四大输入输出流(抽象类,使用时使用其子类)：  
	InputStream(字节输入流)：
 	    所有字节输入流的超类，提供从一个字节输入流读取数据的基本方法
	OuputStream(字节输出流)：
    	所有字节输出流的超类，提供向一个字节输出流写入数据的基本方法
	Reader(字符输入流)：
    	所有字符输入流的超类，提供从一个字符输入流读取数据的基本方法
	Writer(字符输出流)：
   		所有字符输出流的超类，提供向一个字符输出流写入数据的基本方法</code></pre>

]]></content>
  </entry>
  <entry>
    <title>算法</title>
    <url>/2022/03/13/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="晋以次纪念我的算法学习"><a href="#晋以次纪念我的算法学习" class="headerlink" title="晋以次纪念我的算法学习"></a>晋以次纪念我的算法学习</h1><h2 id="正则表达"><a href="#正则表达" class="headerlink" title="正则表达"></a>正则表达</h2><p><a href="https://regexlearn.com/">正则学习网站</a></p>
<h3 id="基本通配符"><a href="#基本通配符" class="headerlink" title="基本通配符"></a>基本通配符</h3><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td align="center">任意字符</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">0个或多个</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">一个或多个</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">0个或1个</td>
</tr>
</tbody></table>
<h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[bdf]eer(字符集中加入^表否定)</td>
<td align="center">括号里其中一个字符与后面匹配</td>
</tr>
<tr>
<td align="center">[a-z]</td>
<td align="center">匹配a到z之间的所有字母</td>
</tr>
<tr>
<td align="center">[0-9]</td>
<td align="center">匹配0到9之间的所有数字</td>
</tr>
</tbody></table>
<h3 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h3><table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">be{2}r</td>
<td align="center">表示e只能出现两次</td>
</tr>
<tr>
<td align="center">be{3,}r</td>
<td align="center">表示e至少出现三次</td>
</tr>
<tr>
<td align="center">be{1,3}r</td>
<td align="center">表示e出现1到3次</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符\"></a>转义字符\</h3><table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="center">匹配*</td>
</tr>
<tr>
<td align="center">^[0-9]</td>
<td align="center">^匹配字符串的开始</td>
</tr>
<tr>
<td align="center">html$</td>
<td align="center">查找仅在末尾出现的html</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">单词字符\w：字母,数字,下划线</td>
</tr>
<tr>
<td align="center">\W</td>
<td align="center">非单词字符</td>
</tr>
<tr>
<td align="center">\d</td>
<td align="center">数字字符</td>
</tr>
<tr>
<td align="center">\D</td>
<td align="center">非数字字符</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">空白字符</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="center">非空白字符</td>
</tr>
</tbody></table>
<h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>不稳定的排序</p>
<p><a href="https://www.luogu.com.cn/problem/P1177">P1177 【模板】快速排序 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;
int a[N];

void quick_sort(int l, int r) &#123;
	if (l &gt;&#x3D; r) &#123;
		return;
	&#125;
	int left &#x3D; l;
	int right &#x3D; r;
	int mid &#x3D; a[l + (r - l) &#x2F; 2];	&#x2F;&#x2F;这里一定要取的当前区间数组的中点对应的值
	while (left &lt;&#x3D; right) &#123;
		while (a[left] &lt; mid) &#123;	&#x2F;&#x2F;找比中点值大的数,不能取&#x3D;，假如要排序的数有相同的话,会浪费时间,不取&#x3D;不影响最后的结果
			left++;				&#x2F;&#x2F;mid左边的数都&lt;&#x3D;mid
		&#125;
		while (a[right] &gt; mid) &#123;&#x2F;&#x2F;找比中点值小的数,不能取&#x3D;，假如要排序的数有相同的话，会浪费时间,不取&#x3D;不影响最后的结果
			right--;			&#x2F;&#x2F;mid右边的数都&gt;&#x3D;mid
		&#125;
		if (left &lt;&#x3D; right) &#123;
			swap(a[left], a[right]);
			left++;
			right--;
		&#125;
	&#125;
    &#x2F;&#x2F;最后的结果为0·····right left·····n-1
    &#x2F;&#x2F;递归左半部分
	quick_sort(l, right);
    &#x2F;&#x2F;递归右半部分
	quick_sort(left, r);
&#125;

int main() &#123;
	int n;
	cin &gt;&gt; n;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		cin &gt;&gt; a[i];
	&#125;
	quick_sort(0, n - 1);
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		if (i &#x3D;&#x3D; 0) &#123;
			cout &lt;&lt; a[i];
		&#125;
		else &#123;
			cout &lt;&lt; &quot; &quot; &lt;&lt; a[i];
		&#125;
	&#125;
	return 0;
&#125;</code></pre>



<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><a href="https://www.luogu.com.cn/problem/P1908">P1908 逆序对 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
const int N &#x3D; 5e5 + 5;
int a[N], temp[N];
long long ans;

void merge_sort(int l, int r) &#123;
	if (l &gt;&#x3D; r) &#123;
		return;
	&#125;
	int mid &#x3D; l + r &gt;&gt; 1;
	int left &#x3D; l;
	int right &#x3D; mid + 1;
	int res &#x3D; l;
	merge_sort(l, mid);
	merge_sort(mid + 1, r);
	while (left &lt;&#x3D; mid &amp;&amp; right &lt;&#x3D; r) &#123;
		if (a[left] &lt;&#x3D; a[right]) &#123;
			temp[res++] &#x3D; a[left++];
		&#125;
		else &#123;
			ans +&#x3D; mid - left + 1;		&#x2F;&#x2F;关键位置
			temp[res++] &#x3D; a[right++];
		&#125;
	&#125;
	while (left &lt;&#x3D; mid) &#123;
		temp[res++] &#x3D; a[left++];
	&#125;
	while (right &lt;&#x3D; r) &#123;
		temp[res++] &#x3D; a[right++];
	&#125;
	for (int i &#x3D; l; i &lt;&#x3D; r; i++) &#123;
		a[i] &#x3D; temp[i];
	&#125;
&#125;

int main() &#123;
	int n;
	cin &gt;&gt; n;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		cin &gt;&gt; a[i];
	&#125;
	merge_sort(0, n - 1);
	cout &lt;&lt; ans;
	return 0;
&#125;</code></pre>



<h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><h4 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h4><p>模板</p>
<pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;最后的答案要往左边找时
int bsearch_1(int l, int r)
&#123;
    while (l &lt; r)
    &#123;
        int mid &#x3D; l + r &gt;&gt; 1;
        if (check(mid)) r &#x3D; mid;    &#x2F;&#x2F;向左边找 &#x2F;&#x2F;if判断mid是否满足性质，注意该性质会划分数组的右边部分
        else l &#x3D; mid + 1;           &#x2F;&#x2F;向右边找
    &#125;
    return l;   &#x2F;&#x2F;最后的l和r的值是相同的
&#125;

&#x2F;&#x2F;最后的答案要往右边找时
int bsearch_2(int l, int r)
&#123;
    while (l &lt; r)
    &#123;
        int mid &#x3D; l + r + 1 &gt;&gt; 1;   &#x2F;&#x2F; mid 向上取整
        if (check(mid)) l &#x3D; mid;
        else r &#x3D; mid - 1;
    &#125;
    return l;
&#125;</code></pre>



<p><a href="https://www.acwing.com/problem/content/791/">789. 数的范围 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;
int a[N];
int main() &#123;
	int n, q;
	cin &gt;&gt; n &gt;&gt; q;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		cin &gt;&gt; a[i];
	&#125;
	while (q--) &#123;
		int x;
		cin &gt;&gt; x;
		int l &#x3D; 0;
		int r &#x3D; n - 1;
		while (l &lt; r) &#123;
			int mid &#x3D; l + r &gt;&gt; 1;
			if (a[mid] &gt;&#x3D; x) &#123;
				r &#x3D; mid;
			&#125;
			else &#123;
				l &#x3D; mid + 1;
			&#125;
		&#125;
		if (a[l] !&#x3D; x) &#123;
			cout &lt;&lt; &quot;-1 -1&quot; &lt;&lt; endl;
		&#125;
		else &#123;
			cout &lt;&lt; l &lt;&lt; &quot; &quot;;
			int l &#x3D; 0;
			int r &#x3D; n - 1;
			while (l &lt; r) &#123;
				int mid &#x3D; l + r + 1 &gt;&gt; 1;
				if (a[mid] &lt;&#x3D; x) &#123;
					l &#x3D; mid;
				&#125;
				else &#123;
					r &#x3D; mid - 1;
				&#125;
			&#125;
			cout &lt;&lt; l &lt;&lt; endl;
		&#125;
	&#125;
	return 0;
&#125;</code></pre>



<h4 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h4><p><a href="https://www.acwing.com/problem/content/792/">790. 数的三次方根 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;

int main() &#123;
	double x;
	scanf(&quot;%lf&quot;, &amp;x);
	double l &#x3D; -1e4, r &#x3D; 1e4;
	while (r - l &gt; 1e-8) &#123;
		double mid &#x3D; (l + r) &#x2F; 2;
		if (mid * mid * mid &gt;&#x3D; x) &#123;
			r &#x3D; mid;
		&#125;
		else &#123;
			l &#x3D; mid;
		&#125;
	&#125;
	printf(&quot;%.6f&quot;, l);
	return 0;
&#125;</code></pre>





<h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><h4 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h4><p><a href="https://www.acwing.com/problem/content/797/">795. 前缀和 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;
int a[N];
int main() &#123;
	int n, m;
	cin &gt;&gt; n &gt;&gt; m;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		cin &gt;&gt; a[i];
	&#125;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		a[i] &#x3D; a[i - 1] + a[i];
	&#125;
	while (m--) &#123;
		int l, r;
		cin &gt;&gt; l &gt;&gt; r;
		cout &lt;&lt; a[r] - a[l - 1] &lt;&lt; endl;
	&#125;
	return 0;
&#125;</code></pre>



<h4 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h4><p><img src="https://wx4.sinaimg.cn/mw2000/0085Lngnly1h4aw61p9exj30ts0m1tdv.jpg" loading="lazy"></p>
<p><a href="https://www.acwing.com/problem/content/description/798/">796. 子矩阵的和 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;点看作格子
&#x2F;&#x2F;格子当作放大无数倍的点,坐标对应的是一个框格,可以联系一维前缀和来想
&#x2F;&#x2F;二维前缀和可以考虑成一个个的格子，结合一维前缀和来思考

#include&lt;iostream&gt;
using namespace std;
const int N &#x3D; 1005;
int a[N][N];

int main() &#123;
	int n, m, q;
	scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;q);
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		for (int j &#x3D; 1; j &lt;&#x3D; m; j++) &#123;
			scanf(&quot;%d&quot;, &amp;a[i][j]);
		&#125;
	&#125;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		for (int j &#x3D; 1; j &lt;&#x3D; m; j++) &#123;
			a[i][j] +&#x3D; a[i - 1][j] + a[i][j - 1] - a[i - 1][j - 1];
		&#125;
	&#125;
	while (q--) &#123;
		int x1, y1, x2, y2;
		scanf(&quot;%d%d%d%d&quot;, &amp;x1, &amp;y1, &amp;x2, &amp;y2);
		printf(&quot;%d\n&quot;, a[x2][y2] - a[x2][y1 - 1] - a[x1 - 1][y2] + a[x1 - 1][y1 - 1]);
	&#125;
	return 0;
&#125;</code></pre>



<h3 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h3><h4 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h4><p><a href="https://www.acwing.com/problem/content/799/">797. 差分 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">假设 a[] &#x3D; &#123;1, 3, 2, 1, 4&#125;
我们把 a 数组带入代码中走一遍，看看结果(注意 b数组是全局变量，所以默认值全为0)
b1 &#x3D; b1 + a1 &#x3D; 0 + 1 &#x3D; 1  ~~~
b2 &#x3D; b2 - a1 &#x3D; 0 - 1 &#x3D; -1

b2 &#x3D; b2 + a2 &#x3D; -1 + 3 &#x3D; 2 ~~~
b3 &#x3D; b3 - a2 &#x3D; 0 - 3 &#x3D; -3

b3 &#x3D; b3 + a3 &#x3D; -3 + 2 &#x3D; -1 ~~~
b4 &#x3D; b4 - a3 &#x3D; 0 - 2 &#x3D; -2

b4 &#x3D; b4 + a4 &#x3D; -2 + 1 &#x3D; -1 ~~~
b5 &#x3D; b5 - a4 &#x3D; 0 - 1 &#x3D; -1

b5 &#x3D; b5 + a5 &#x3D; -1 + 4 &#x3D; 3 ~~~
b6 &#x3D; b6 - a5 &#x3D; 0 - 4 &#x3D; -4

请注意带~~~的就是构造出来的b差分数组,可以将b数组求前缀和
</code></pre>



<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;
int a[N], b[N];

void insert(int l, int r, int d) &#123;
	b[l] +&#x3D; d;
	b[r + 1] -&#x3D; d;
&#125;

int main() &#123;
	int n, m;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		scanf(&quot;%d&quot;, &amp;a[i]);
	&#125;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		insert(i, i, a[i]);
	&#125;
	&#x2F;*
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		b[i] &#x3D; a[i] - a[i - 1];
	&#125;
	*&#x2F;
	while (m--) &#123;
		int l, r, c;
		scanf(&quot;%d%d%d&quot;, &amp;l, &amp;r, &amp;c);
		insert(l, r, c);
	&#125;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		b[i] +&#x3D; b[i - 1];
	&#125;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		printf(&quot;%d &quot;, b[i]);
	&#125;
	return 0;
&#125;</code></pre>



<h4 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h4><p><a href="https://www.acwing.com/problem/content/description/800/">798. 差分矩阵 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">我们可以先假想a数组为空，那么b数组一开始也为空，但是实际上a数组并不为空，因此我们每次让以(i,j)为左上角到以(i,j)为右下角面积内元素(其实就是一个小方格的面积)去插入 a[i][j]，等价于原数组a中(i,j) 到(i,j)范围内 加上了 a[i][j] ,因此执行n*m次插入操作，就成功构建了差分b数组.</code></pre>



<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
const int N &#x3D; 1005;
int a[N][N], b[N][N];

void insert(int x1, int y1, int x2, int y2, int c) &#123;
	b[x1][y1] +&#x3D; c;
	b[x2 + 1][y1] -&#x3D; c;
	b[x1][y2 + 1] -&#x3D; c;
	b[x2 + 1][y2 + 1] +&#x3D; c;
&#125;

int main() &#123;
	int n, m, q;
	scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;q);
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		for (int j &#x3D; 1; j &lt;&#x3D; m; j++) &#123;
			scanf(&quot;%d&quot;, &amp;a[i][j]);
			insert(i, j, i, j, a[i][j]);
		&#125;
	&#125;
	while (q--) &#123;
		int x1, y1, x2, y2, c;
		scanf(&quot;%d%d%d%d%d&quot;, &amp;x1, &amp;y1, &amp;x2, &amp;y2, &amp;c);
		insert(x1, y1, x2, y2, c);
	&#125;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		for (int j &#x3D; 1; j &lt;&#x3D; m; j++) &#123;
			b[i][j] +&#x3D; b[i - 1][j] + b[i][j - 1] - b[i - 1][j - 1];
		&#125;
	&#125;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		for (int j &#x3D; 1; j &lt;&#x3D; m; j++) &#123;
			printf(&quot;%d &quot;, b[i][j]);
		&#125;
		printf(&quot;\n&quot;);
	&#125;
	return 0;
&#125;</code></pre>



<h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p><a href="https://www.acwing.com/problem/content/description/801/">799. 最长连续不重复子序列 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">时间复杂度O(2n)

#include&lt;iostream&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;
int a[N], s[N];
int main() &#123;
	int n;
	cin &gt;&gt; n;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		cin &gt;&gt; a[i];
	&#125;
	int maxx &#x3D; -1;
	for (int i &#x3D; 1, j &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		s[a[i]]++;
        &#x2F;&#x2F;将所维护的区间中那个重复的去掉
		while (s[a[i]] &gt; 1) &#123;
			s[a[j]]--;
			j++;
		&#125;
		maxx &#x3D; max(maxx, i - j + 1);
	&#125;
	cout &lt;&lt; maxx;
	return 0;
&#125;</code></pre>



<p><a href="https://www.acwing.com/problem/content/description/802/">800. 数组元素的目标和 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;使用双指针
#include&lt;iostream&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;
int a[N], b[N];
int main() &#123;
	int n, m, x;
	cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		cin &gt;&gt; a[i];
	&#125;
	for (int i &#x3D; 0; i &lt; m; i++) &#123;
		cin &gt;&gt; b[i];
	&#125;
	for (int i &#x3D; 0, j &#x3D; m - 1; i &lt; n; i++) &#123;
		while (a[i] + b[j] &gt; m) &#123;
			j--;
		&#125;
		if (a[i] + b[j] &#x3D;&#x3D; x) &#123;
			cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j;
		&#125;
	&#125;
	return 0;
&#125;


&#x2F;&#x2F;使用二分
#include&lt;iostream&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;
int a[N], b[N];
int main() &#123;
	int n, m, x;
	cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		cin &gt;&gt; a[i];
	&#125;
	for (int i &#x3D; 0; i &lt; m; i++) &#123;
		cin &gt;&gt; b[i];
	&#125;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		int t &#x3D; x - a[i];
		int l &#x3D; 0, r &#x3D; m - 1;
		while (l &lt; r) &#123;
			int mid &#x3D; l + r &gt;&gt; 1;
			if (b[mid] &gt;&#x3D; t) &#123;
				r &#x3D; mid;
			&#125;
			else &#123;
				l &#x3D; mid + 1;
			&#125;
		&#125;
		if (b[l] !&#x3D; t) &#123;
			continue;
		&#125;
		else &#123;
			cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; l;
			break;
		&#125;
	&#125;
	return 0;
&#125;</code></pre>



<h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p><a href="https://www.acwing.com/problem/content/803/">801. 二进制中1的个数 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;


int low_bit(int x) &#123;
	return x &amp; -x;
&#125;

int main() &#123;
	int n;
	cin &gt;&gt; n;
	while (n--) &#123;
		int x;
		cin &gt;&gt; x;
		int res &#x3D; 0;
		while (x) &#123;
			x -&#x3D; low_bit(x);
			res++;
		&#125;
		cout &lt;&lt; res &lt;&lt; &quot; &quot;;
	&#125;
	return 0;
&#125;</code></pre>



<h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><pre class="language-c++" data-language="c++"><code class="language-c++">unique函数的实现(前提排好序)
vector&lt;int&gt;::iterator unique(vector&lt;int&gt; &amp;a)&#123;
    int j&#x3D;0;
    for(int i&#x3D;0;i&lt;a.size();i++)&#123;
        &#x2F;&#x2F;是第一个或者a[i]不等于a[i-1]
        if(!i || a[i]!&#x3D;a[i-1])
            a[j++]&#x3D;a[i];
    &#125;
    return a.begin()+j;
&#125;
unique函数底层是将后面没有重复的向前面有重复的进行覆盖</code></pre>

<p><a href="https://www.acwing.com/problem/content/804/">802. 区间和 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N &#x3D; 3e5 + 5;

typedef pair&lt;int, int&gt; PII;
vector&lt;int&gt; all;
vector&lt;PII&gt; alls, query;
int a[N], s[N];

int find(int x) &#123;
	int l &#x3D; 0, r &#x3D; all.size() - 1;
	while (l &lt; r) &#123;
		int mid &#x3D; l + r &gt;&gt; 1;
		if (all[mid] &gt;&#x3D; x) &#123;
			r &#x3D; mid;
		&#125;
		else &#123;
			l &#x3D; mid + 1;
		&#125;
	&#125;
	return l + 1;
&#125;

int main() &#123;
	int n, m;
	cin &gt;&gt; n &gt;&gt; m;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		int x, c;
		cin &gt;&gt; x &gt;&gt; c;
		alls.push_back(&#123; x,c &#125;);
		all.push_back(x);
	&#125;
	for (int i &#x3D; 0; i &lt; m; i++) &#123;
		int l, r;
		cin &gt;&gt; l &gt;&gt; r;
		query.push_back(&#123; l,r &#125;);
		all.push_back(l);
		all.push_back(r);
	&#125;
	sort(all.begin(), all.end());
	all.erase(unique(all.begin(), all.end()), all.end());
	for (auto t : alls) &#123;
		int x &#x3D; find(t.first);
		a[x] +&#x3D; t.second;
	&#125;
	for (int i &#x3D; 1; i &lt;&#x3D; all.size(); i++) &#123;
		s[i] &#x3D; s[i - 1] + a[i];
	&#125;
	for (auto t : query) &#123;
		cout &lt;&lt; s[find(t.second)] - s[find(t.first) - 1] &lt;&lt; endl;
	&#125;
	return 0;
&#125;</code></pre>



<h3 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h3><p><a href="https://www.acwing.com/problem/content/805/">803. 区间合并 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
typedef pair&lt;int, int&gt; PII;
vector&lt;PII&gt; v;
int main() &#123;
	int n;
	cin &gt;&gt; n;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		int l, r;
		cin &gt;&gt; l &gt;&gt; r;
		v.push_back(&#123; l,r &#125;);
	&#125;
	sort(v.begin(), v.end());
	int ed &#x3D; 0xc0c0c0c0;	&#x2F;&#x2F;ed定义为无穷小
	int ans &#x3D; 0;
    &#x2F;&#x2F;遍历着n段区间
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
        &#x2F;&#x2F;当前区间的左端点比ed大
		if (v[i].first &gt; ed) &#123;
            &#x2F;&#x2F;ed则取当前区间和原来的ed中最大的那个
			ed &#x3D; v[i].second;
           &#x2F;&#x2F;ans加一
			ans++;
		&#125;
		else &#123;
			ed &#x3D; max(ed, v[i].second);
		&#125;
	&#125;
	cout &lt;&lt; ans;
	return 0;

&#125;</code></pre>



<h3 id="Manacher算法-马拉车"><a href="#Manacher算法-马拉车" class="headerlink" title="Manacher算法(马拉车)"></a>Manacher算法(马拉车)</h3><p>视频推荐</p>
<p><a href="https://www.bilibili.com/video/BV173411V7Ai?spm_id_from=333.880.my_history.page.click&vd_source=22aa3aaec95356c8f9cc134a80e7eb2b">184 Manacher(马拉车)_哔哩哔哩_bilibili</a></p>
<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805067704549376">题目详情 - L2-008 最长对称子串 (pintia.cn)</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;
const int N &#x3D; 2005;
char a[N], s[N];
int d[N];
int main() &#123;
	ios::sync_with_stdio(false);
	int k &#x3D; 0, res &#x3D; -1;
	string a;
	getline(cin, a);
	int n &#x3D; a.length();
	s[0] &#x3D; &#39;$&#39;;
	s[++k] &#x3D; &#39;#&#39;;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		s[++k] &#x3D; a[i];
		s[++k] &#x3D; &#39;#&#39;;
	&#125;
	d[1] &#x3D; 1;
	int l, r &#x3D; 1;
	for (int i &#x3D; 2; i &lt;&#x3D; k; i++) &#123;
		if (i &lt;&#x3D; r) &#123;
			d[i] &#x3D; min(d[r - i + l], r - i + 1);
			res &#x3D; max(res, d[i]);
		&#125;
		while (s[i - d[i]] &#x3D;&#x3D; s[i + d[i]]) &#123;
			d[i]++;
			res &#x3D; max(res, d[i]);
		&#125;
		if (i + d[i] - 1 &gt; r) &#123;
			l &#x3D; i - d[i] + 1;
			r &#x3D; i + d[i] - 1;
		&#125;
	&#125;
	cout &lt;&lt; res - 1;
	return 0;
&#125;</code></pre>

<p>也可看洛谷的模板题</p>
<p><a href="https://www.luogu.com.cn/problem/P3805">P3805 【模板】manacher 算法 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&lt;string&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;

using namespace std;

const int N &#x3D; 2.2e7 + 5;
char a[N], s[N];
int d[N];

int main() &#123;
	scanf(&quot;%s&quot;, &amp;a);
	int n &#x3D; strlen(a);
	int k &#x3D; 0;
	s[0] &#x3D; &#39;$&#39;;
	s[++k] &#x3D; &#39;#&#39;;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		s[++k] &#x3D; a[i];
		s[++k] &#x3D; &#39;#&#39;;
	&#125;
	d[1] &#x3D; 1;
	int l, r &#x3D; 1;
	int res &#x3D; -1;
	for (int i &#x3D; 2; i &lt;&#x3D; k; i++) &#123;
        &#x2F;&#x2F;在盒内有两种情况
        &#x2F;&#x2F;1.d[r-i+l]&lt;r-i+1	对称点且还在盒内
        &#x2F;&#x2F;d[i] &#x3D; d[r-i+l]
        &#x2F;&#x2F;2.d[r-i+l]&gt;&#x3D;r-i+1 对称点在盒外
        &#x2F;&#x2F;令d[i]&#x3D;r-i+1,从r+1往后暴力枚举
		if (i &lt;&#x3D; r) &#123;
			d[i] &#x3D; min(d[r - i + l], r - i + 1);
        &#125;
		while (s[i + d[i]] &#x3D;&#x3D; s[i - d[i]]) &#123;
			d[i]++;
            res &#x3D; max(res, d[i]);
		&#125;
		if (i + d[i] - 1 &gt; r) &#123;
			l &#x3D; i - d[i] + 1;
			r &#x3D; i + d[i] - 1;
		&#125;
	&#125;
	printf(&quot;%d&quot;, res - 1);
	return 0;
&#125;</code></pre>





<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><pre class="language-c++" data-language="c++"><code class="language-c++">tot相当于一个分配器，如果需要加入新的结点就用tot++分配出一个下标</code></pre>

<p><a href="https://www.acwing.com/problem/content/828/">826. 单链表 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;

const int N &#x3D; 1e5 + 5;

int head &#x3D; -1, e[N], ne[N], tot &#x3D; 1;

&#x2F;&#x2F;头插
void insert_head(int x) &#123;
	e[tot] &#x3D; x;
	ne[tot] &#x3D; head;
	head &#x3D; tot++;
&#125;
&#x2F;&#x2F;删除,让第k个结点的下一位直接指向下一个结点的下一位
void delete_k(int k) &#123;
	ne[k] &#x3D; ne[ne[k]];
&#125;

void insert_x(int k, int x) &#123;
	e[tot] &#x3D; x;
	ne[tot] &#x3D; ne[k];
	ne[k] &#x3D; tot++;
&#125;

int main() &#123;
	
	int m;
	cin &gt;&gt; m;
	while (m--) &#123;
		char op;
		cin &gt;&gt; op;
		if (op &#x3D;&#x3D; &#39;H&#39;) &#123;
			int x;
			cin &gt;&gt; x;
			insert_head(x);
		&#125;
		else if (op &#x3D;&#x3D; &#39;D&#39;) &#123;
			int k;
			cin &gt;&gt; k;
            &#x2F;&#x2F;删除头结点
			if (k &#x3D;&#x3D; 0) &#123;
				head &#x3D; ne[head];
			&#125;
			else &#123;
				delete_k(k);
			&#125;
		&#125;
		else &#123;
			int k, x;
			cin &gt;&gt; k &gt;&gt; x;
			insert_x(k, x);
		&#125;
	&#125;
	for (int i &#x3D; head; ~i; i &#x3D; ne[i]) &#123;
		cout &lt;&lt; e[i] &lt;&lt; &quot; &quot;;
	&#125;
	return 0;
&#125;</code></pre>



<h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><p><a href="https://www.acwing.com/problem/content/829/">827. 双链表 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;

const int N &#x3D; 1e5 + 5;
int l[N], r[N], e[N], tot;

&#x2F;&#x2F;第k个数的右边进行插入
void insert_x(int k, int x) &#123;
	e[tot] &#x3D; x;
	r[tot] &#x3D; r[k];
	l[tot] &#x3D; k;
	l[r[k]] &#x3D; tot;
	r[k] &#x3D; tot++;
&#125;

void remove_k(int k) &#123;
	r[l[k]] &#x3D; r[k];
	l[r[k]] &#x3D; l[k];
&#125;

int main() &#123;
    &#x2F;&#x2F;头指针	&#x2F;&#x2F;尾指针
	r[0] &#x3D; 1, l[1] &#x3D; 0;
    &#x2F;&#x2F;tot从2开始,注意此时的&quot;第k个数&quot;
	tot &#x3D; 2;
	int m;
	cin &gt;&gt; m;
	while (m--) &#123;
		string op;
		cin &gt;&gt; op;
		int k, x;
		if (op &#x3D;&#x3D; &quot;L&quot;) &#123;
			cin &gt;&gt; x;
			insert_x(0, x);
		&#125;
		else if (op &#x3D;&#x3D; &quot;R&quot;) &#123;
			cin &gt;&gt; x;
			insert_x(l[1], x);
		&#125;
		else if (op &#x3D;&#x3D; &quot;D&quot;) &#123;
			cin &gt;&gt; k;
			remove_k(k + 1);
		&#125;
		else if (op &#x3D;&#x3D; &quot;IL&quot;) &#123;
			cin &gt;&gt; k &gt;&gt; x;
			insert_x(l[k + 1], x);
		&#125;
		else &#123;
			cin &gt;&gt; k &gt;&gt; x;
			insert_x(k + 1, x);
		&#125;
	&#125;
	for (int i &#x3D; r[0]; i !&#x3D; 1; i &#x3D; r[i]) &#123;
		cout &lt;&lt; e[i] &lt;&lt; &quot; &quot;;
	&#125;
	return 0;
&#125;</code></pre>



<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;

int stk[N], tt;

int main() &#123;
	int m;
	cin &gt;&gt; m;
	while (m--) &#123;
		string s;
		cin &gt;&gt; s;
		int x;
		if (s &#x3D;&#x3D; &quot;push&quot;) &#123;
			cin &gt;&gt; x;
			stk[++tt] &#x3D; x;
		&#125;
		else if (s &#x3D;&#x3D; &quot;pop&quot;) &#123;
			tt--;
		&#125;
		else if (s &#x3D;&#x3D; &quot;empty&quot;) &#123;
			if (tt &gt; 0) &#123;
				cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;
			&#125;
			else &#123;
				cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;
			&#125;
		&#125;
		else &#123;
			cout &lt;&lt; stk[tt] &lt;&lt; endl;
		&#125;
	&#125;
	return 0;
&#125;</code></pre>



<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p><a href="https://www.acwing.com/problem/content/831/">829. 模拟队列 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;

int que[N], hh, tt &#x3D; -1;

int main() &#123;
	int m;
	cin &gt;&gt; m;
	while (m--) &#123;
		string s;
		cin &gt;&gt; s;
		if (s &#x3D;&#x3D; &quot;push&quot;) &#123;
			int x;
			cin &gt;&gt; x;
			que[++tt] &#x3D; x;
		&#125;
		else if (s &#x3D;&#x3D; &quot;pop&quot;) &#123;
			hh++;
		&#125;
		else if (s &#x3D;&#x3D; &quot;empty&quot;) &#123;
			if (hh &lt;&#x3D; tt) &#123;
				cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;
			&#125;
			else &#123;
				cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;
			&#125;
		&#125;
		else &#123;
			cout &lt;&lt; que[hh] &lt;&lt; endl;
		&#125;
	&#125;
	return 0;
&#125;</code></pre>



<h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><pre class="language-c++" data-language="c++"><code class="language-c++">Q: 为什么要保持栈内元素大小的单调递增特性？
A: 由于栈内元素是递增的，所以比较次数一定是最少的，这就实现了优化。
Q: 如何保持栈内元素大小的递增性？
A: 在依次出栈比较栈顶元素和当前数组元素大小的时候，如果栈顶元素小，那么找到目标值，将当前数组元素入栈，这样保持了栈内元素大小的递增性；如果栈顶元素大，那么栈顶指针左移，直到找到目标值，再将当前数组元素入栈，这样就保持了栈内元素大小的递增性。我们不必在意这个过程破坏了栈的结构，因为之前的数已经找到之前数组元素对应的目标值了。</code></pre>

<p><a href="https://www.luogu.com.cn/problem/P5788">P5788 【模板】单调栈 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;

using namespace std;
const int N &#x3D; 3e6 + 5;
int a[N];
int b[N];

int main() &#123;
	int n;
	scanf(&quot;%d&quot;, &amp;n);
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		scanf(&quot;%d&quot;, &amp;a[i]);
	&#125;
	stack&lt;int&gt; st;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		while (!st.empty() &amp;&amp; a[i] &gt; a[st.top()]) &#123;    &#x2F;&#x2F;当前数字比栈顶元素大，下标加入b数组，弹出栈顶元素
			b[st.top()] &#x3D; i + 1;
			st.pop();
		&#125;
		st.push(i);
	&#125;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		printf(&quot;%d &quot;, b[i]);
	&#125;
	return 0;
&#125;</code></pre>



<p>例题</p>
<pre class="language-c++" data-language="c++"><code class="language-c++">描述：有n个人站队，所有的人全部向右看，个子高的可以看到个子低的发型，给出每个人的身高，问所有人能看到其他人发现总和是多少。
输入：4 3 7 1
输出：2</code></pre>

<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;

const int N &#x3D; 3e6 + 5;
int a[N];

int main() &#123;
	int n;
	cin &gt;&gt; n;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		cin &gt;&gt; a[i];
	&#125;
	a[n] &#x3D; 0x7fffffff;	&#x2F;&#x2F;保证最后的人数被加上
	int sum &#x3D; 0;
	stack&lt;int&gt; st;
	for (int i &#x3D; 0; i &lt;&#x3D; n; i++) &#123;
		while (!st.empty() &amp;&amp; a[i] &gt; a[st.top()]) &#123;
			sum +&#x3D; i - st.top() - 1;
			st.pop();
		&#125;
		st.push(i);
	&#125;
	cout &lt;&lt; sum;
&#125;</code></pre>



<p><a href="https://www.acwing.com/problem/content/832/">830. 单调栈 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;

const int N &#x3D; 1e5 + 5;
int stack[N], tt;

int main() &#123;
	int n;
	scanf(&quot;%d&quot;, &amp;n);
	while (n--) &#123;
		int x;
		scanf(&quot;%d&quot;, &amp;x);
		&#x2F;&#x2F;栈中有元素且栈顶元素的值比x大,栈顶指针tt--
		while (tt &amp;&amp; stack[tt] &gt;&#x3D; x) &#123;
			tt--;
		&#125;
		if (tt) &#123;
			cout &lt;&lt; stack[tt] &lt;&lt; &quot; &quot;;
		&#125;
		else &#123;
			cout &lt;&lt; -1 &lt;&lt; &quot; &quot;;
		&#125;
		stack[++tt] &#x3D; x;
	&#125;
	return 0;
&#125;</code></pre>



<h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><p><em><strong>“如果一个选手比你小还比你强，你就可以退役了。”</strong>——单调队列的原理</em></p>
<p>主要用于解决滑动窗口类问题</p>
<p>可以参考知乎上的解答：<a href="https://zhuanlan.zhihu.com/p/346354943">算法学习笔记(66): 单调队列 - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.luogu.com.cn/problem/P1886">P1886 滑动窗口 /【模板】单调队列 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;滑动窗口左边为队头，右边为队尾


#include&lt;bits&#x2F;stdc++.h&gt;

using namespace std;
typedef long long ll;
const int N &#x3D; 1e6 + 5;
int n, k;
deque&lt;ll&gt; dq;
ll a[N];

&#x2F;&#x2F;滑动窗口最小值
void min_de() &#123;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		if (!dq.empty() &amp;&amp; i - dq.front() &gt;&#x3D; k)  &#x2F;&#x2F;窗口的左边没在窗口后，将队头弹出
			dq.pop_front();
		while (!dq.empty() &amp;&amp; a[i] &lt; a[dq.back()])	&#x2F;&#x2F;当前数比队列的最后一位小的时候，弹出队尾元素
			dq.pop_back();
		dq.push_back(i);
		if (i &gt;&#x3D; k - 1)		&#x2F;&#x2F;只有当滑动窗口在第k个才输出最小值
			cout &lt;&lt; a[dq.front()] &lt;&lt; &quot; &quot;;
	&#125;
&#125;

&#x2F;&#x2F;滑动窗口最大值
void max_de() &#123;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		if (!dq.empty() &amp;&amp; i - dq.front() &gt;&#x3D; k)
			dq.pop_front();
		while (!dq.empty() &amp;&amp; a[i] &gt; a[dq.back()])
			dq.pop_back();
		dq.push_back(i);
		if (i &gt;&#x3D; k - 1)		&#x2F;&#x2F;只有当滑动窗口在第k个才输出最大值
			cout &lt;&lt; a[dq.front()] &lt;&lt; &quot; &quot;;
	&#125;
&#125;

int main() &#123;
	cin &gt;&gt; n &gt;&gt; k;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		cin &gt;&gt; a[i];
	&#125;
	min_de();
	cout &lt;&lt; endl;
	dq.clear();		&#x2F;&#x2F;清空队列
	max_de();
	return 0;
&#125;</code></pre>



<p>使用数组来模拟</p>
<pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;认为 head &lt;&#x3D; tail 时，队列不为空，head初始化为0，tail初始化为-1
&#x2F;&#x2F;左为head,右为tail

#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;
const int N &#x3D; 1e6 + 5;
int a[N];
int que[N], head, tail &#x3D; -1;
int main() &#123;
	int n, k;
	cin &gt;&gt; n &gt;&gt; k;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		cin &gt;&gt; a[i];
	&#125;
    &#x2F;&#x2F;最小
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		if (head &lt;&#x3D; tail &amp;&amp; i - que[head] &gt;&#x3D; k) &#123; &#x2F;&#x2F;不在窗口内的弹出，队头指针++
			head++;
		&#125;
		while (head &lt;&#x3D; tail &amp;&amp; a[que[tail]] &gt; a[i]) &#123;  &#x2F;&#x2F;a[i] 比队列尾小，把队列尾弹出,队尾指针--
			tail--;
		&#125;
		que[++tail] &#x3D; i;
		if (i &gt;&#x3D; k - 1) &#123;
			cout &lt;&lt; a[que[head]] &lt;&lt; &quot; &quot;;
		&#125;
	&#125;
	cout &lt;&lt; endl;
	memset(que, 0, sizeof(que));
	head &#x3D; 0;
	tail &#x3D; -1;
    &#x2F;&#x2F;最大
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		if (head &lt;&#x3D; tail &amp;&amp; i - que[head] &gt;&#x3D; k) &#123;
			head++;
		&#125;
		while (head &lt;&#x3D; tail &amp;&amp; a[que[tail]] &lt; a[i]) &#123;
			tail--;
		&#125;
		que[++tail] &#x3D; i;
		if (i &gt;&#x3D; k - 1) &#123;
			cout &lt;&lt; a[que[head]] &lt;&lt; &quot; &quot;;
		&#125;
	&#125;
	return 0;
&#125;</code></pre>



<h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><p><a href="https://zhuanlan.zhihu.com/p/105629613">算法学习笔记(13): KMP算法 - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.acwing.com/problem/content/833/">831. KMP字符串 - AcWing题库</a></p>
<p>暴力做法</p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;
const int N &#x3D; 1e6 + 5;
char a[N], b[N];
int main() &#123;
	cin.tie(0);
	cout.tie(0);
	int n;
	cin &gt;&gt; n;
	string p;
	cin &gt;&gt; p;
	int m;
	cin &gt;&gt; m;
	string s;
	cin &gt;&gt; s;
	int t &#x3D; 0;
	for (int i &#x3D; 0; i &lt; m - n + 1; i++) &#123;
		int flag &#x3D; 0;
		for (int j &#x3D; 0; j &lt; n; j++) &#123;
			if (s[i + j] !&#x3D; p[j]) &#123;
				flag &#x3D; 1;
			&#125;
		&#125;
		if (flag) &#123;
			continue;
		&#125;
		else &#123;
			cout &lt;&lt; i &lt;&lt; &quot; &quot;;
		&#125;
	&#125;
	return 0;
&#125;</code></pre>

<p>KMP算法</p>
<pre class="language-c++" data-language="c++"><code class="language-c++">时间复杂度：O(n+m)</code></pre>

<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;

const int N &#x3D; 1e5 + 5, M &#x3D; 1e6 + 5;
char p[N], s[M];
int ne[N];	&#x2F;&#x2F;后缀与前缀相同时的最大长度,ne数组的下标从1开始

int main() &#123;
	cin.tie(0);
	cout.tie(0);
	int n, m;
	cin &gt;&gt; n &gt;&gt; p + 1 &gt;&gt; m &gt;&gt; s + 1;
	for (int i &#x3D; 2, j &#x3D; 0; i &lt;&#x3D; n; i++) &#123;
		&#x2F;&#x2F;当模式串不为第一个且第i个和第j+1个不相等时,找j的ne[j]
		while (j &amp;&amp; p[i] !&#x3D; p[j + 1]) &#123;
			j &#x3D; ne[j];
		&#125;
		if (p[i] &#x3D;&#x3D; p[j + 1]) &#123;
			j++;
		&#125;
		ne[i] &#x3D; j;
	&#125;
	for (int i &#x3D; 1, j &#x3D; 0; i &lt;&#x3D; m; i++) &#123;
		while (j &amp;&amp; s[i] !&#x3D; p[j + 1]) &#123;
            &#x2F;&#x2F;&#x2F;&#x2F;j与最大长度相等,可以想成此时的模式串中的下标其实就是最大的那个长度
            &#x2F;&#x2F;此时 1 ~ j 与 i-j+1 ~ i是一样的
			j &#x3D; ne[j];
		&#125;
		if (s[i] &#x3D;&#x3D; p[j + 1]) &#123;
			j++;
		&#125;
		if (n &#x3D;&#x3D; j) &#123;
			cout &lt;&lt; i - n &lt;&lt; &quot; &quot;;
			j &#x3D; ne[j];
		&#125;
	&#125;
&#125;</code></pre>

<p>使用字符串哈希</p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
typedef unsigned long long ll;
const int N &#x3D; 1e5 + 5, M &#x3D; 1e6 + 5, P &#x3D; 131;
ll p[M], h[M];
char a[N], b[M];

ll search(int l, int r) &#123;
	return h[r] - h[l - 1] * p[r - l + 1];
&#125;

int main() &#123;
	int n, m;
	scanf(&quot;%d%s%d%s&quot;, &amp;n, a + 1, &amp;m, b + 1);
	p[0] &#x3D; 1;
	ll sum &#x3D; 0;
    &#x2F;&#x2F;算出模板串的哈希值
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		sum &#x3D; sum * P + a[i];
	&#125;
	for (int i &#x3D; 1; i &lt;&#x3D; m; i++) &#123;
		p[i] &#x3D; p[i - 1] * P;
		h[i] &#x3D; h[i - 1] * P + b[i];
	&#125;
	for (int i &#x3D; 1, j &#x3D; n; j &lt;&#x3D; m; i++, j++) &#123;
		if (search(i, j) &#x3D;&#x3D; sum) &#123;
			printf(&quot;%d &quot;, i - 1);
		&#125;
	&#125;
	return 0;
&#125;</code></pre>



<h3 id="Tire"><a href="#Tire" class="headerlink" title="Tire"></a>Tire</h3><p><a href="https://www.acwing.com/problem/content/837/">835. Trie字符串统计 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;
&#x2F;&#x2F;son数组中的N不是代表数的深度,是代表结点
&#x2F;&#x2F;son[x][y]代表第x个结点到达y字符对应的结点的编号
&#x2F;&#x2F;tot保证了所有结点的唯一性
int son[N][26], cnt[N], tot;
char s[N];

void insert(char str[]) &#123;
    &#x2F;&#x2F;p相当于是第几个结点,son[p][u]相当于是编号为p的结点到达u的结点的下标(值表示目标结点的下标)
	int p &#x3D; 0;
	for(int i&#x3D;0; str[i];i++)&#123;
		int u &#x3D; str[i] - &#39;a&#39;;
        &#x2F;&#x2F;如果子结点不存在,新建一个结点
		if (!son[p][u]) son[p][u] &#x3D; ++tot;
        &#x2F;&#x2F;p指向子结点
		p &#x3D; son[p][u];
	&#125;
	cnt[p]++;
&#125;

int query(char str[]) &#123;
	int p &#x3D; 0;
	for (int i &#x3D; 0; str[i]; i++) &#123;
		int u &#x3D; str[i] - &#39;a&#39;;
		if (!son[p][u]) &#123;
			return 0;
		&#125;
		p &#x3D; son[p][u];
	&#125;
	return cnt[p];
&#125;

int main() &#123;
	cin.tie(0);
	cout.tie(0);
	int n;
	cin &gt;&gt; n;
	while (n--) &#123;
		char c;
		cin &gt;&gt; c &gt;&gt; s;
		if (c &#x3D;&#x3D; &#39;I&#39;) &#123;
			insert(s);
		&#125;
		else &#123;
			cout &lt;&lt; query(s) &lt;&lt; endl;
		&#125;
	&#125;
	return 0;
&#125;</code></pre>

<p><a href="https://www.acwing.com/problem/content/description/145/">143. 最大异或对 - AcWing题库</a></p>
<p>最大异或对</p>
<pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;异或的话与当前位不同能让异或值更大
&#x2F;&#x2F;例如：若当前位是1，则选择0对应的结点，异或值能更大
&#x2F;&#x2F;时间复杂度O(31*n)
#include&lt;iostream&gt;
using namespace std;

const int N &#x3D; 1e5 + 5, M &#x3D; 31 * N;
int son[M][2], tot;

void insert(int x) &#123;
	int p &#x3D; 0;
	for (int i &#x3D; 30; i &gt;&#x3D; 0; i--) &#123;
		int u &#x3D; x &gt;&gt; i &amp; 1;
		if (!son[p][u]) &#123;
			son[p][u] &#x3D; ++tot;
		&#125;
		p &#x3D; son[p][u];
	&#125;
&#125;

int query(int x) &#123;
	int p &#x3D; 0;
	int res &#x3D; 0;
	for (int i &#x3D; 30; i &gt;&#x3D; 0; i--) &#123;
		int u &#x3D; x &gt;&gt; i &amp; 1;
        &#x2F;&#x2F;与u相反的结点若存在,选在该结点
		if (son[p][!u]) &#123;
			p &#x3D; son[p][!u];
			res &#x3D; (res &lt;&lt; 1) + !u;
		&#125;
        &#x2F;&#x2F;否则走与u相同的结点
		else &#123;
			p &#x3D; son[p][u];
			res &#x3D; (res &lt;&lt; 1) + u;
		&#125;
	&#125;
	return res;
&#125;

int main() &#123;
	cin.tie(0);
	cout.tie(0);
	int n;
	cin &gt;&gt; n;
	int res &#x3D; -1;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		int x;
		cin &gt;&gt; x;
		insert(x);
		int t &#x3D; query(x);
		res &#x3D; max(res, t ^ x);
	&#125;
	cout &lt;&lt; res;
	return 0;
&#125;</code></pre>



<h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p><a href="https://www.luogu.com.cn/problem/P1551">题目链接,洛谷P1551</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/93647900">并查集</a></p>
<pre class="language-java" data-language="java"><code class="language-java">对于一个集合，秩指的就是这个集合中元素的个数。在并查集的合并操作中，如果我们将秩较小的集合合并到秩更大的集合上，那么比起将秩较大的集合合并到秩更小的集合上，在每一次查询操作中，前者总能花费更少的时间。

值得一提的是，按秩合并也被称为启发式合并。它是数据结构相关问题的一种重要思想，就是把“小的结构”合并到“大的结构”中，并且只增加“小的结构”的查询代价。所以在并查集中，我们把所有集合合并起来后，增加的总代价也不会超过<span class="token class-name">NlogN</span>。也就是说，单次查询的平均时间复杂度为<span class="token class-name">O</span><span class="token punctuation">(</span>logN<span class="token punctuation">)</span>。

那么同时使用路径压缩和按秩合并的优化呢？如果我们这么做的话，单次查询操作的时间复杂度会变成一个奇怪的东西：<span class="token class-name">O</span><span class="token punctuation">(</span>α<span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">)</span>。其中α<span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span>为反阿克曼函数，它是一个比logN增长得还要慢的函数。</code></pre>



<pre class="language-Java" data-language="Java"><code class="language-Java">import java.util.Scanner;

public class Main &#123;
    static int[] f &#x3D; new int[5005];
    static int[] size &#x3D; new int[5005];
    public static void main(String[] args)&#123;
        Scanner scanner &#x3D; new Scanner(System.in);
        int n &#x3D; scanner.nextInt();
        int m &#x3D; scanner.nextInt();
        int p &#x3D; scanner.nextInt();
        for (int i &#x3D; 0; i &lt; n; i++) &#123;
            f[i] &#x3D; i;
            size[i] &#x3D; 1;
        &#125;
        for (int i &#x3D; 0; i &lt; m; i++) &#123;
            merge(scanner.nextInt(),scanner.nextInt());
        &#125;
        for (int i &#x3D; 0; i &lt; p; i++) &#123;
            if(find(scanner.nextInt()) !&#x3D; find(scanner.nextInt()))&#123;
                System.out.println(&quot;No&quot;);
            &#125;else&#123;
                System.out.println(&quot;Yes&quot;);
            &#125;
        &#125;
        scanner.close();
    &#125;
    static int find(int x)&#123;
        if(x &#x3D;&#x3D; f[x])&#123;
            return x;
        &#125;
        return f[x] &#x3D; find(f[x]);		 &#x2F;&#x2F;将每个元素都直接指向其父亲结点
    &#125;
    static void merge(int x,int y)&#123;      &#x2F;&#x2F;按秩合并
        int a &#x3D; find(x);
        int b &#x3D; find(y);
        if(size[a] &lt;&#x3D; size[b])&#123;
            f[a] &#x3D; b;
            size[b] +&#x3D; size[a];
        &#125;else&#123;
            f[b] &#x3D; a;
            size[a] +&#x3D; size[b];
        &#125;
    &#125;
&#125;
</code></pre>



<p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805063963230208">题目详情 - L2-013 红色警报 (pintia.cn)</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;并查集的一个妙用，可以用来求联通区域的个数

#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;
const int N &#x3D; 505, M &#x3D; 5005;
bool vis[N];
int e[M], ne[M];
int f[N];
int n, m;

int find(int x) &#123;
	if (x &#x3D;&#x3D; f[x]) &#123;
		return x;
	&#125;
	return f[x] &#x3D; find(f[x]);
&#125;

void merge(int x, int y) &#123;
	int m &#x3D; find(x);
	int n &#x3D; find(y);
	f[m] &#x3D; n;
&#125;

void init() &#123;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		f[i] &#x3D; i;
	&#125;
&#125;

int count() &#123;
	int counts &#x3D; 0;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		if (find(i) &#x3D;&#x3D; i) &#123;
			counts++;
		&#125;
	&#125;
	return counts;
&#125;

int main() &#123;
	cin &gt;&gt; n &gt;&gt; m;
	init();
	for (int i &#x3D; 0; i &lt; m; i++) &#123;
		cin &gt;&gt; e[i] &gt;&gt; ne[i];
		merge(e[i], ne[i]);
	&#125;
	int k1 &#x3D; count();
	int k;
	cin &gt;&gt; k;
	while (k--) &#123;
		int t;
		cin &gt;&gt; t;
		vis[t] &#x3D; true;
		init();
		for (int i &#x3D; 0; i &lt; m; i++) &#123;
			if (!vis[e[i]] &amp;&amp; !vis[ne[i]]) &#123;
				merge(e[i], ne[i]);
			&#125;
		&#125;
		int k2 &#x3D; count();
		if (k1 + 1 &#x3D;&#x3D; k2 || k1 &#x3D;&#x3D; k2) &#123;
			cout &lt;&lt; &quot;City &quot; &lt;&lt; t &lt;&lt; &quot; is lost.&quot; &lt;&lt; endl;
		&#125;
		else &#123;
			cout &lt;&lt; &quot;Red Alert: City &quot; &lt;&lt; t &lt;&lt; &quot; is lost!&quot; &lt;&lt; endl;
		&#125;
		k1 &#x3D; k2;
	&#125;
	if (k1 &#x3D;&#x3D; n) &#123;
		cout &lt;&lt; &quot;Game Over.&quot;;
	&#125;
	return 0;
&#125;</code></pre>

<p>带权并查集</p>
<p><a href="https://www.acwing.com/problem/content/description/242/">240. 食物链 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;
int f[N], d[N];

&#x2F;&#x2F;d[x]：x到父节点的距离
int find(int x) &#123;
	if (x &#x3D;&#x3D; f[x]) &#123;
		return x;
	&#125;
	int t &#x3D; find(f[x]);
	d[x] +&#x3D; d[f[x]];
	f[x] &#x3D; t;
	return f[x];
&#125;

int main() &#123;
	cin.tie(0);
	cout.tie(0);
	int n, k;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;k);
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		f[i] &#x3D; i;
	&#125;
	int res &#x3D; 0;
	while (k--) &#123;
		int t, x, y;
		scanf(&quot;%d%d%d&quot;, &amp;t, &amp;x, &amp;y);
		if (x &gt; n || y &gt; n)res++;
		else &#123;
			int fx &#x3D; find(x), fy &#x3D; find(y);
            &#x2F;&#x2F;为同类时
			if (t &#x3D;&#x3D; 1) &#123;
                &#x2F;&#x2F;父节点相同说明在同一颗树上
				if (fx &#x3D;&#x3D; fy &amp;&amp; (d[x] - d[y]) % 3 !&#x3D; 0)res++;
                &#x2F;&#x2F;不相同说明在不同的树上
				else if (fx !&#x3D; fy) &#123;
                    &#x2F;&#x2F;合并
					f[fx] &#x3D; fy;
					d[fx] &#x3D; d[y] - d[x];
				&#125;
			&#125;
            &#x2F;&#x2F;吃与被吃的关系时
			else &#123;
                &#x2F;&#x2F;父节点相同说明在同一颗树上
				if (fx &#x3D;&#x3D; fy &amp;&amp; (d[x] - d[y] - 1) % 3 !&#x3D; 0)res++;
                &#x2F;&#x2F;不相同说明在不同的树上
				else if (fx !&#x3D; fy) &#123;
                    &#x2F;&#x2F;合并
					f[fx] &#x3D; fy;
					d[fx] &#x3D; d[y] - d[x] + 1;
				&#125;
			&#125;
		&#125;
	&#125;
	cout &lt;&lt; res;
	return 0;
&#125;</code></pre>

<p>种类并查集</p>
<p><a href="https://www.luogu.com.cn/problem/P1525">P1525关押罪犯 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N &#x3D; 4e4 + 5, M &#x3D; 1e5 + 5;
int f[N];

struct Node &#123;
	int a;
	int b;
	int c;
&#125;node[M];

int find(int x) &#123;
	if (x &#x3D;&#x3D; f[x]) &#123;
		return x;
	&#125;
	return f[x] &#x3D; find(f[x]);
&#125;

void merge(int x, int y) &#123;
	x &#x3D; find(x);
	y &#x3D; find(y);
	if (x !&#x3D; y) &#123;
		f[x] &#x3D; y;
	&#125;
&#125;

bool cmp(Node a, Node b) &#123;
	return a.c &gt; b.c;
&#125;

int main() &#123;
	cin.tie(0);
	cout.tie(0);
	int n, m;
	cin &gt;&gt; n &gt;&gt; m;
    &#x2F;&#x2F;1~n为朋友,n+1~2n为敌人
	for (int i &#x3D; 1; i &lt;&#x3D; 2 * n; i++) &#123;
		f[i] &#x3D; i;
	&#125;
	for (int i &#x3D; 0; i &lt; m; i++) &#123;
		cin &gt;&gt; node[i].a &gt;&gt; node[i].b &gt;&gt; node[i].c;
	&#125;
	sort(node, node + m, cmp);
	for (int i &#x3D; 0; i &lt; m; i++) &#123;
		int a &#x3D; node[i].a;
		int b &#x3D; node[i].b;
		int c &#x3D; node[i].c;
        &#x2F;&#x2F;当a,b两个朋友是敌人的时候，说明此时就是答案
		if (find(a) &#x3D;&#x3D; find(b)) &#123;
			cout &lt;&lt; c;
			break;
		&#125;
		merge(a, b + n);
		merge(b, a + n);
		if (i &#x3D;&#x3D; m - 1) &#123;
			cout &lt;&lt; 0;
		&#125;
	&#125;
	return 0;
&#125;</code></pre>



<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p><a href="https://www.acwing.com/problem/content/description/840/">838. 堆排序 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;
int h[N], siz;

void down(int x) &#123;
    &#x2F;&#x2F;t表示3个点中最小值的编号
	int t &#x3D; x;
	&#x2F;&#x2F;左儿子更小,t等于左儿子
	if (2 * x &lt;&#x3D; siz &amp;&amp; h[2 * x] &lt; h[t]) t &#x3D; 2 * x;
	&#x2F;&#x2F;右儿子更小,t等于右儿子
	if (2 * x + 1 &lt;&#x3D; siz &amp;&amp; h[2 * x + 1] &lt; h[t]) t &#x3D; 2 * x + 1;
	if (t !&#x3D; x) &#123;
		swap(h[x], h[t]);
		down(t);
	&#125;
&#125;

void up(int x) &#123;
	while (x &#x2F; 2 &amp;&amp; h[x &#x2F; 2] &gt; h[x]) &#123;
		swap(h[x &#x2F; 2], h[x]);
		x &#x2F;&#x3D; 2;
	&#125;
&#125;

int main() &#123;
	cin.tie(0);
	cout.tie(0);
	int n, m;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		scanf(&quot;%d&quot;, &amp;h[i]);
	&#125;
	siz &#x3D; n;
	&#x2F;&#x2F;从非叶子结点的最后一个开始进行堆调整,时间复杂度O(n)
	for (int i &#x3D; n &#x2F; 2; i &gt;&#x3D; 1; i--) &#123;
		down(i);
	&#125;
	while (m--) &#123;
		cout &lt;&lt; h[1] &lt;&lt; &quot; &quot;;
        &#x2F;&#x2F;根结点等于最后一个结点的值
		h[1] &#x3D; h[siz--];
        &#x2F;&#x2F;从第一个结点开始堆调整
		down(1);
	&#125;
	return 0;
&#125;</code></pre>

<p><a href="https://www.acwing.com/problem/content/description/841/">839. 模拟堆 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;
&#x2F;&#x2F;ph[x]数组表示插入的第x个数对应堆的下标
&#x2F;&#x2F;hp[x]数组表示堆的下标为x的点对应插入的第几个数
int h[N], ph[N], hp[N], tot;

&#x2F;&#x2F;接受两个数在h数组中的下标
void heap_swap(int a, int b) &#123;
	swap(ph[hp[a]], ph[hp[b]]);
	swap(hp[a], hp[b]);
	swap(h[a], h[b]);
&#125;

void up(int u) &#123;
	while (u &#x2F; 2 &amp;&amp; h[u &#x2F; 2] &gt; h[u]) &#123;
		heap_swap(u &#x2F; 2, u);
		u &#x2F;&#x3D; 2;
	&#125;
&#125;

void down(int u) &#123;
	int t &#x3D; u;
	if (u * 2 &lt;&#x3D; tot &amp;&amp; h[u * 2] &lt; h[t]) t &#x3D; u * 2;
	if (u * 2 + 1 &lt;&#x3D; tot &amp;&amp; h[u * 2 + 1] &lt; h[t]) t &#x3D; u * 2 + 1;
	if (u !&#x3D; t) &#123;
		heap_swap(u, t);
		down(t);
	&#125;
&#125;

int main() &#123;
	&#x2F;&#x2F;m拿来记作第几个数
	int n, m &#x3D; 0;
	scanf(&quot;%d&quot;, &amp;n);
	while (n--) &#123;
		char op[5];
		int k, x;
		scanf(&quot;%s&quot;, op);
		if (!strcmp(op, &quot;I&quot;)) &#123;
			scanf(&quot;%d&quot;, &amp;x);
			m++;
			h[++tot] &#x3D; x;
			ph[m] &#x3D; tot, hp[tot] &#x3D; m;
			up(tot);
		&#125;
		else if (!strcmp(op, &quot;PM&quot;)) &#123;
			printf(&quot;%d\n&quot;, h[1]);
		&#125;
		else if (!strcmp(op, &quot;DM&quot;)) &#123;
			heap_swap(1, tot--);
			down(1);
		&#125;
		else if (!strcmp(op, &quot;D&quot;)) &#123;
			scanf(&quot;%d&quot;, &amp;k);
			k &#x3D; ph[k];
			heap_swap(k, tot--);
			up(k);
			down(k);
		&#125;
		else &#123;
			scanf(&quot;%d%d&quot;, &amp;k, &amp;x);
			k &#x3D; ph[k];
			h[k] &#x3D; x;
			up(k);
			down(k);
		&#125;
	&#125;
	return 0;
&#125;</code></pre>



<h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p><a href="https://www.acwing.com/problem/content/description/842/">840. 模拟散列表 - AcWing题库</a></p>
<p>拉链法(链地址法)</p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
const int N &#x3D; 100003;

int head[N], e[N], ne[N], tot;

void insert(int x) &#123;
	int k &#x3D; ((x % N) + N) % N;
	e[tot] &#x3D; x;
	ne[tot] &#x3D; head[k];
	head[k] &#x3D; tot++;
&#125;

bool find(int x) &#123;
	int k &#x3D; ((x % N) + N) % N;
	for (int i &#x3D; head[k]; ~i; i &#x3D; ne[i]) &#123;
		if (e[i] &#x3D;&#x3D; x) &#123;
			return true;
		&#125;
	&#125;
	return false;
&#125;

int main() &#123;
	int n;
	scanf(&quot;%d&quot;, &amp;n);
	memset(head, -1, sizeof head);
	while (n--) &#123;
		char op[2];
		int x;
		scanf(&quot;%s%d&quot;, op, &amp;x);
		if (*op &#x3D;&#x3D; &#39;I&#39;) &#123;
			insert(x);
		&#125;
		else &#123;
			if (find(x)) &#123;
				printf(&quot;Yes\n&quot;);
			&#125;
			else &#123;
				printf(&quot;No\n&quot;);
			&#125;
		&#125;
	&#125;
	return 0;
&#125;</code></pre>

<p>开放寻址法</p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
&#x2F;&#x2F;定义null无穷大，说明此处没人
const int N &#x3D; 200003, null &#x3D; 0x3f3f3f3f;
int h[N];

int find(int x) &#123;
	int t &#x3D; ((x % N) + N) % N;
	while (h[t] !&#x3D; null &amp;&amp; h[t] !&#x3D; x) &#123;
		t++;
		&#x2F;&#x2F;t等于N时，循环从0开始找
		if (t &#x3D;&#x3D; N) &#123;
			t &#x3D; 0;
		&#125;
	&#125;
	return t;
&#125;

int main() &#123;
	memset(h, 0x3f, sizeof h);
	int n;
	scanf(&quot;%d&quot;, &amp;n);
	while (n--) &#123;
		char op[2];
		int x;
		scanf(&quot;%s %d&quot;, op, &amp;x);
		int t &#x3D; find(x);
		if (op[0] &#x3D;&#x3D; &#39;I&#39;) &#123;
			h[t] &#x3D; x;
		&#125;
		else &#123;
			if (h[t] !&#x3D; null) &#123;
				printf(&quot;Yes\n&quot;);
			&#125;
			else &#123;
				printf(&quot;No\n&quot;);
			&#125;
		&#125;
	&#125;
	return 0;
&#125;</code></pre>

<p>字符串哈希</p>
<pre class="language-c++" data-language="c++"><code class="language-c++">快速判断两个字符串是不是相等的时候
本质思想就是确保每个字符串的哈希是不一样的,避免哈希冲突,每个字符串对应唯一一个哈希值</code></pre>

<p><a href="https://www.acwing.com/problem/content/843/">841. 字符串哈希 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">假定人品足够好，不存在哈希冲突，每个字符串对应唯一一个哈希值
一般情况&#123;
    P&#x3D;131 或 13331
    Q&#x3D;2^64
&#125;

全称字符串前缀哈希法，把字符串变成一个p进制数字（哈希值），实现不同的字符串映射到不同的数字。
对形如 X1X2X3⋯Xn−1XnX1X2X3⋯Xn−1Xn 的字符串,采用字符的ascii 码乘上 P 的次方来计算哈希值。

映射公式 (X1×Pn−1 + X2×Pn−2 +⋯+ Xn−1×P1 + Xn×P0) mod Q

求一个字符串的哈希值就相当于求前缀和，求一个字符串的子串哈希值就相当于求部分和。

前缀和公式 h[i+1] &#x3D; h[i]×P+s[i] i∈[0,n−1]i∈[0,n−1] h为前缀和数组，s为字符串数组
区间和公式 h[l,r] &#x3D; h[r] − h[l − 1] × P ^ (r−l+1)
区间和公式的理解: ABCDE 与 ABC 的前三个字符值是一样，只差两位，
乘上 P² 把 ABC 变为 ABC00，再用 ABCDE - ABC00 得到 DE 的哈希值。</code></pre>

<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;

typedef unsigned long long ll;
&#x2F;&#x2F;表示P进制的数
const int N &#x3D; 1e5 + 5, P &#x3D; 131;

char s[N];
ll h[N], p[N];

&#x2F;&#x2F;朴素做法可以把从l到r进行累加求哈希，但为了简化运算，使用了前缀和，使查询时候的复杂度为O(1)
ll search(int l, int r) &#123;
	return h[r] - h[l - 1] * p[r - l + 1];
&#125;

int main() &#123;
	int n, m;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	scanf(&quot;%s&quot;, s + 1);
	p[0] &#x3D; 1;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		h[i] &#x3D; h[i - 1] * P + s[i];
		p[i] &#x3D; p[i - 1] * P;
	&#125;
	while (m--) &#123;
		int l1, r1, l2, r2;
		scanf(&quot;%d%d%d%d&quot;, &amp;l1, &amp;r1, &amp;l2, &amp;r2);
		if (search(l1, r1) &#x3D;&#x3D; search(l2, r2)) &#123;
			printf(&quot;Yes\n&quot;);
		&#125;
		else &#123;
			printf(&quot;No\n&quot;);
		&#125;
	&#125;
	return 0;
&#125;</code></pre>



<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="线性dp"><a href="#线性dp" class="headerlink" title="线性dp"></a>线性dp</h3><h4 id="普通dp"><a href="#普通dp" class="headerlink" title="普通dp"></a>普通dp</h4><p><a href="https://www.luogu.com.cn/problem/P1002">P1002 过河卒 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;

int dx[8] &#x3D; &#123; -2,-1,1,2,2,1,-1,-2 &#125;;
int dy[8] &#x3D; &#123; -1,-2,-2,-1,1,2,2,1 &#125;;
int vis[25][25];
long long int dp[25][25];

int main() &#123;
	int n, m, x, y;
	cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;
    &#x2F;&#x2F;防止数组越界,tips：马那有2
	n +&#x3D; 2;
	m +&#x3D; 2;
	x +&#x3D; 2;
	y +&#x3D; 2;
    &#x2F;&#x2F;马控制的地方标记为1
	for (int i &#x3D; 0; i &lt; 8; i++) &#123;
		vis[x + dx[i]][y + dy[i]] &#x3D; 1;
	&#125;
	vis[x][y] &#x3D; 1;
	dp[2][1] &#x3D; 1;
	for (int i &#x3D; 2; i &lt;&#x3D; n; i++) &#123;
		for (int j &#x3D; 2; j &lt;&#x3D; m; j++) &#123;
			if (!vis[i][j])
				dp[i][j] &#x3D; dp[i - 1][j] + dp[i][j - 1];
			else
			    dp[i][j] &#x3D; 0;
		&#125;
	&#125;
	cout &lt;&lt; dp[n][m];
	return 0;
&#125;</code></pre>



<p><a href="https://www.luogu.com.cn/problem/P2028">P2028 龙兄摘苹果 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;

using namespace std;
typedef unsigned long long ll;
const int N &#x3D; 10005;
ll dp[N][1005];

int main() &#123;
	ios::sync_with_stdio(false);
	ll n, k, p;
	cin &gt;&gt; n &gt;&gt; k &gt;&gt; p;
    &#x2F;&#x2F;前i-1个苹果放在前j个盘中，此时有：dp[i-1][j] * j种方案
    &#x2F;&#x2F;前i-1个苹果放在前j-1个盘中，此时有：dp[i-1][j-1]种方案
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		dp[i][1] &#x3D; 1;
		for (int j &#x3D; 2; j &lt;&#x3D; k; j++) &#123;
			dp[i][j] &#x3D; (((dp[i - 1][j] % p) * (j % p)) % p + (dp[i - 1][j - 1] % p)) % p;
		&#125;
	&#125;
	cout &lt;&lt; dp[n][k] % p;
	return 0;
&#125;</code></pre>



<p><a href="https://www.acwing.com/problem/content/description/900/">898. 数字三角形 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;可以从下往上思考，过程中一直选出最大的dp[i][j]，最终答案即为dp[1][1]

#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;

const int N &#x3D; 505;
int dp[N][N];

int main() &#123;
	int n;
	cin &gt;&gt; n;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		for (int j &#x3D; 1; j &lt;&#x3D; i; j++) &#123;
			cin &gt;&gt; dp[i][j];
		&#125;
	&#125;
	for (int i &#x3D; n; i &gt;&#x3D; 1; i--) &#123;
		for (int j &#x3D; 1; j &lt;&#x3D; i; j++) &#123;
			dp[i][j] +&#x3D; max(dp[i + 1][j], dp[i + 1][j + 1]);
		&#125;
	&#125;
	cout &lt;&lt; dp[1][1];
	return 0;
&#125;</code></pre>



<h4 id="LIS-最长上升子序列"><a href="#LIS-最长上升子序列" class="headerlink" title="LIS(最长上升子序列)"></a>LIS(最长上升子序列)</h4><pre class="language-c++" data-language="c++"><code class="language-c++">dp[i]：所有以第i个数为止，最长上升子序列的长度</code></pre>

<p>[P1091 <a href="https://www.luogu.com.cn/problem/P1091">NOIP2004 提高组] 合唱队形 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<h5 id="1-普通方法，使用动态规划，时间复杂度n²"><a href="#1-普通方法，使用动态规划，时间复杂度n²" class="headerlink" title="1.普通方法，使用动态规划，时间复杂度n²"></a>1.普通方法，使用动态规划，时间复杂度n²</h5><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;

using namespace std;
int t[105];
int dp[2][105];
int main() &#123;
	int n;
	cin &gt;&gt; n;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		cin &gt;&gt; t[i];
	&#125;
    &#x2F;&#x2F;正向求最长上升子序列
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
	    dp[0][i] &#x3D; 1;
		for (int j &#x3D; 1; j &lt; i; j++) &#123;
			if (t[j] &lt; t[i]) &#123;
				dp[0][i] &#x3D; max(dp[0][i], dp[0][j] + 1);
			&#125;
		&#125;
	&#125;
    &#x2F;&#x2F;反向求最长上升子序列
	for (int i &#x3D; n; i &gt;&#x3D; 1; i--) &#123;
	    dp[1][i] &#x3D; 1;
		for (int j &#x3D; n; j &gt; i; j--) &#123;
			if (t[j] &lt; t[i]) &#123;
				dp[1][i] &#x3D; max(dp[1][i], dp[1][j] + 1);
			&#125;
		&#125;
	&#125;
	int maxx &#x3D; -1;
    &#x2F;&#x2F;以i为切割点求答案
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		maxx &#x3D; max(dp[0][i] + dp[1][i], maxx);
	&#125;
	cout &lt;&lt; n - maxx + 1;	&#x2F;&#x2F;重复减，应该加1
	return 0;
&#125;</code></pre>

<h5 id="2-使用贪心-二分，时间复杂度nlogn"><a href="#2-使用贪心-二分，时间复杂度nlogn" class="headerlink" title="2.使用贪心+二分，时间复杂度nlogn"></a>2.使用贪心+二分，时间复杂度nlogn</h5><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;

using namespace std;
const int N &#x3D; 1e5 + 5;

int a[N];
int low[N];
int len;

int binary_search(int x) &#123;
	int l &#x3D; 1, r &#x3D; len;
	while (l &lt; r) &#123;
		int mid &#x3D; (l + r) &gt;&gt; 1;
        &#x2F;&#x2F;尽量往左边找
		if (low[mid] &gt;&#x3D; x) &#123;
			r &#x3D; mid;
		&#125;
		else &#123;
			l &#x3D; mid + 1;
		&#125;
	&#125;
	return l;
&#125;

int main() &#123;
	int n;
	cin &gt;&gt; n;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		cin &gt;&gt; a[i];
		low[i] &#x3D; 0x7f7f7f7f;
	&#125;
	low[1] &#x3D; a[1];
	len &#x3D; 1;
	for (int i &#x3D; 2; i &lt;&#x3D; n; i++) &#123;
		if (a[i] &gt; low[len]) &#123;
			low[++len] &#x3D; a[i]; 
		&#125;
		else &#123;
			&#x2F;&#x2F;找出上升子序列第一个&gt;&#x3D;a[i]的数，用a[i]将其替换
			low[binary_search(a[i])] &#x3D; a[i];
		&#125;
	&#125;
	cout &lt;&lt; len;
	return 0;
&#125;</code></pre>



<h4 id="LCS-最长公共子序列"><a href="#LCS-最长公共子序列" class="headerlink" title="LCS(最长公共子序列)"></a>LCS(最长公共子序列)</h4><p>[P2543 <a href="https://www.luogu.com.cn/problem/P2543">AHOI2004]奇怪的字符串 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;

using namespace std;

const int N &#x3D; 10005;
int dp[N][N];

int main() &#123;
	string s1, s2;
	cin &gt;&gt; s1 &gt;&gt; s2;
	
	for (int i &#x3D; 1; i &lt;&#x3D; s1.length(); i++) &#123;
		for (int j &#x3D; 1; j &lt;&#x3D; s2.length(); j++) &#123;
			if (s1[i - 1] &#x3D;&#x3D; s2[j - 1])
				dp[i][j] &#x3D; dp[i - 1][j - 1] + 1;
			else
				dp[i][j] &#x3D; max(dp[i - 1][j], dp[i][j - 1]);
		&#125;
	&#125;
	cout &lt;&lt; dp[s1.length()][s2.length()];
	return 0;
&#125;</code></pre>





<h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><pre class="language-c++" data-language="c++"><code class="language-c++">如果除0外初始化为负无穷，那么仅刚好装下的位置是正数(从0加)，其余位置为负数(从负无穷加)，故需要枚举</code></pre>



<h4 id="1-二维数组"><a href="#1-二维数组" class="headerlink" title="1.二维数组"></a>1.二维数组</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token class-name">V</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">V</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>		<span class="token comment">//前N个物品在背包体积为V时的最大价值</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token class-name">V</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> j<span class="token punctuation">)</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">V</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h4 id="2-一维数组-滚动数组实现"><a href="#2-一维数组-滚动数组实现" class="headerlink" title="2.一维数组(滚动数组实现)"></a>2.一维数组(滚动数组实现)</h4><pre class="language-Java" data-language="Java"><code class="language-Java">import java.util.Scanner;


public class Main &#123;
    public static void main(String[] args) &#123;
        Scanner scanner &#x3D; new Scanner(System.in);
        int N &#x3D; scanner.nextInt();
        int V &#x3D; scanner.nextInt();
        int[] v &#x3D; new int[N + 1];
        int[] w &#x3D; new int[N + 1];
        int[] dp &#x3D; new int[V + 1];
        for (int i &#x3D; 1; i &lt;&#x3D; N; i++) &#123;
            v[i] &#x3D; scanner.nextInt();
            w[i] &#x3D; scanner.nextInt();
        &#125;
        for (int i &#x3D; 1; i &lt;&#x3D; N; i++) &#123;
            for (int j &#x3D; V; j &gt;&#x3D; v[i]; j--) &#123; 
                dp[j] &#x3D; Math.max(dp[j],dp[j-v[i]]+w[i]);
            &#125;
        &#125;
        System.out.println(dp[V]);
        scanner.close();
    &#125;
&#125;</code></pre>



<h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><p>可以理解成第i层的结果，因为每个物品都是无限的，所以要用第i层的结果使值最大，要使用前面更新的状态，前面的状态可能是选了的，也可能没选第i个物品</p>
<pre class="language-c++" data-language="c++"><code class="language-c++">f[i,j] &#x3D; max(f[i-1,j],  f[i-1][j-v[i]]+w[i],f[i-1][j-2v[i]]+2w[i],f[i-1][j-3v[i]]+3w[i]······)
f[i,j-v[i]] &#x3D; max(		f[i-1][j-v[i]],     f[i-1][j-2v[i]]+w[i], f[i-1][j-3v[i]]+2w[i]······)
    
f[i,j] &#x3D; max(f[i-1,j],f[i][j-v[i]+w[i]]);</code></pre>



<h4 id="1-二维数组-1"><a href="#1-二维数组-1" class="headerlink" title="1.二维数组"></a>1.二维数组</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token class-name">V</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">V</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//不取：dp[i-1][j]</span>
        <span class="token comment">//取：dp[i][j-v[i]+w[i]]   物品数量是无限的</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token class-name">V</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">V</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h4 id="2-一维数组-滚动数组实现-1"><a href="#2-一维数组-滚动数组实现-1" class="headerlink" title="2.一维数组(滚动数组实现)"></a>2.一维数组(滚动数组实现)</h4><p>​    通过覆盖原来的数组来实现更新</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token class-name">V</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">V</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token class-name">V</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token class-name">V</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><pre class="language-c++" data-language="c++"><code class="language-c++">第i个物品数量为s[i]

f[i,j] &#x3D; max(f[i-1,j],f[i-1][j-v[i]]+w[i],f[i-1][j-2v[i]]+2w[i],···,f[i-1][j-sv[i]]+sw[i])
    
f[i,j-v[i]] &#x3D; max(	  f[i-1][j-v[i]],     f[i-1][j-2v[i]]+w[i],···, f[i-1][j-sv[i]]+sw[i],f[i-1][j-(s+1)v[i]+(s+1)w[i]])</code></pre>



<p>模板题</p>
<p><a href="https://www.acwing.com/problem/content/4/">4. 多重背包问题 I - AcWing题库</a></p>
<h4 id="1-三重循环实现"><a href="#1-三重循环实现" class="headerlink" title="1.三重循环实现"></a>1.三重循环实现</h4><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;

const int N &#x3D; 1e3 + 5;
int v[N], w[N], s[N], dp[N][N];
int main() &#123;
	int n, V;
	cin &gt;&gt; n &gt;&gt; V;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];
	&#125;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		for (int j &#x3D; 0; j &lt;&#x3D; V; j++) &#123;
			for (int k &#x3D; 0; k &lt;&#x3D; s[i] &amp;&amp; k * v[i] &lt;&#x3D; j; k++) &#123;
				dp[i][j] &#x3D; max(dp[i][j], dp[i - 1][j - k * v[i]] + k * w[i]);
                			&#x2F;&#x2F;取k个之间一直循环比较大小     &#x2F;&#x2F;相当于取0个，取1个···取k个
			&#125;
		&#125;
	&#125;
	cout &lt;&lt; dp[n][V];
	return 0;
&#125;</code></pre>



<p><a href="https://www.acwing.com/problem/content/5/">5. 多重背包问题 II - AcWing题库</a></p>
<h4 id="2-使用二进制进行优化"><a href="#2-使用二进制进行优化" class="headerlink" title="2.使用二进制进行优化"></a>2.使用二进制进行优化</h4><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;

const int N &#x3D; 12005;
int v[N], w[N];
int dp[N];

int main() &#123;
	int n, V;
	cin &gt;&gt; n &gt;&gt; V;
	int ans &#x3D; 0;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		int a, b, c;
		cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;
		int k &#x3D; 1;
		while (k &lt;&#x3D; c) &#123;
			v[++ans] &#x3D; k * a;
			w[ans] &#x3D; k * b;
			c -&#x3D; k;
			k *&#x3D; 2;
		&#125;
		if (c) &#123;
			v[++ans] &#x3D; c * a;
			w[ans] &#x3D; c * b;
		&#125;
	&#125;
	n &#x3D; ans;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		for (int j &#x3D; V; j &gt;&#x3D; v[i]; j--) &#123;
			dp[j] &#x3D; max(dp[j], dp[j - v[i]] + w[i]);
		&#125;
	&#125;
	cout &lt;&lt; dp[V];
	return 0;
&#125;</code></pre>



<h4 id="3-使用单调队列进行优化"><a href="#3-使用单调队列进行优化" class="headerlink" title="3.使用单调队列进行优化"></a>3.使用单调队列进行优化</h4><p><a href="https://www.acwing.com/problem/content/description/6/">6. 多重背包问题 III - AcWing题库</a></p>
<p><a href="https://www.bilibili.com/video/BV1354y1C7SF?spm_id_from=333.337.search-card.all.click&vd_source=22aa3aaec95356c8f9cc134a80e7eb2b">9.76 多重背包 单调队列优化——信息学竞赛培训课程_哔哩哔哩</a></p>
<p>这篇题解推荐一下</p>
<p><a href="https://www.acwing.com/solution/content/53507/">AcWing 6. 多重背包问题 III【单调队列优化+图示】 - AcWing</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">key:当k&#x3D;j时为不取，只有当k&#x3D;j+sv之后，滑动窗口才满，下一轮就开始滑动


#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;
const int N &#x3D; 1e3 + 5;
const int M &#x3D; 2e4 + 5;

int dp[N][M];
int que[M];

int main() &#123;
	int n, V;
	cin &gt;&gt; n &gt;&gt; V;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		int v, w, s;
		cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;
		&#x2F;&#x2F;对物品体积求完全剩余系
		&#x2F;*
		* 假设 v w s
		*      2 4 3
		*	   背包体积为9
		*  假设：
		* 		f[9] &#x3D; 14 f[7]+4 &#x3D; 14
		*		f[9] &#x3D; 14 f[5]+8 &#x3D; 13
		*		f[9] &#x3D; 17 f[3]+12 &#x3D;17
		* &#x2F;&#x2F;一个窗口
		*		f[8] &#x3D; 14 f[6]+4 &#x3D; 14
		*		f[8] &#x3D; 14 f[4]+8 &#x3D; 13
		*		f[8] &#x3D; 14 f[2]+12 &#x3D;12
		* &#x2F;&#x2F;一个窗口
		*		f[7] &#x3D; 10 f[5]+4 &#x3D; 9
		*		f[7] &#x3D; 13 f[3]+8 &#x3D; 13
		*		f[7] &#x3D; 13 f[1]+12 &#x3D;12
		* f数组是由对v取余相同的转换来的
		* f[j]  f[j+v]	f[j+2v] ...
		* 滑动窗口大小为s + 1,因为我们是拿窗口的下一个数来进行分析的
		*&#x2F;
		for (int j &#x3D; 0; j &lt; v; j++) &#123;  &#x2F;&#x2F;分成v个不同余数的类
			int head &#x3D; 0, tail &#x3D; -1;
			for (int k &#x3D; j; k &lt;&#x3D; V; k +&#x3D; v) &#123;  &#x2F;&#x2F;每个类使用单调队列
				&#x2F;&#x2F;不在窗口(k-s*v,k-v)内，注意此时窗口大小实际为s+1,此时的k要比滑动窗口最右边大v个体积
                &#x2F;&#x2F;不使用&gt;&#x3D;而使用&gt;的理解：k&#x3D;j时，是为不取第i个物品
				if (head &lt;&#x3D; tail &amp;&amp; k - que[head] &gt; s * v) &#123;
					head++;
				&#125;
				&#x2F;&#x2F;比较是否比tail位置的大，tail的最大值应该为i-1个物品的最大加上此时第i个物品
				&#x2F;&#x2F;dp[i - 1][que[tail]] + (k - que[tail]) &#x2F; v * w
				while (head &lt;&#x3D; tail &amp;&amp; dp[i - 1][k] &gt; dp[i - 1][que[tail]] + (k - que[tail]) &#x2F; v * w) &#123;
					tail--;
				&#125;
				que[++tail] &#x3D; k;
				dp[i][k] &#x3D; dp[i - 1][que[head]] + (k - que[head]) &#x2F; v * w;
			&#125;
		&#125;
	&#125;
	cout &lt;&lt; dp[n][V];
	return 0;
&#125;</code></pre>



<h3 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h3><p><img src="https://wx2.sinaimg.cn/mw2000/0085Lngnly1h3i5ye056bj30ig0aodib.jpg" alt="分组背包分析法" loading="lazy"></p>
<h4 id="1-二维数组-2"><a href="#1-二维数组-2" class="headerlink" title="1.二维数组"></a>1.二维数组</h4><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;

using namespace std;
const int N &#x3D; 105;
int v[N][N], w[N][N], s[N], dp[N][N];

int main() &#123;
	int n, V;
	cin &gt;&gt; n &gt;&gt; V;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		cin &gt;&gt; s[i];
		for (int j &#x3D; 0; j &lt; s[i]; j++) &#123;
			cin &gt;&gt; v[i][j] &gt;&gt; w[i][j];
		&#125;
	&#125;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		for (int j &#x3D; 0; j &lt;&#x3D; V; j++) &#123;
		    dp[i][j] &#x3D; dp[i-1][j];
			for (int k &#x3D; 0; k &lt; s[i]; k++) &#123;
				if(v[i][k] &lt;&#x3D; j)
                    &#x2F;&#x2F;要么都不选，要么就选其中的一个max
					dp[i][j] &#x3D; max(dp[i][j], dp[i - 1][j - v[i][k]] + w[i][k]);
			&#125;
		&#125;
	&#125;
	cout &lt;&lt; dp[n][V];
	return 0;
&#125;
</code></pre>



<h4 id="2-优化到一维数组-滚动数组"><a href="#2-优化到一维数组-滚动数组" class="headerlink" title="2.优化到一维数组(滚动数组)"></a>2.优化到一维数组(滚动数组)</h4><pre class="language-c++" data-language="c++"><code class="language-c++">和01背包一样，为从后往前遍历，防止选重
    
#include&lt;bits&#x2F;stdc++.h&gt;

using namespace std;
const int N &#x3D; 105;
int v[N][N], w[N][N], s[N], dp[N];

int main() &#123;
	int n, V;
	cin &gt;&gt; n &gt;&gt; V;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		cin &gt;&gt; s[i];
		for (int j &#x3D; 0; j &lt; s[i]; j++) &#123;
			cin &gt;&gt; v[i][j] &gt;&gt; w[i][j];
		&#125;
	&#125;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		for (int j &#x3D; V; j &gt;&#x3D; 0; j--) &#123;
			for (int k &#x3D; 0; k &lt; s[i]; k++) &#123;
				if(v[i][k] &lt;&#x3D; j)
					dp[j] &#x3D; max(dp[j], dp[j - v[i][k]] + w[i][k]);
			&#125;
		&#125;
	&#125;
	cout &lt;&lt; dp[V];
	return 0;
&#125;
</code></pre>



<h3 id="混合背包"><a href="#混合背包" class="headerlink" title="混合背包"></a>混合背包</h3><p><a href="https://www.acwing.com/problem/content/7/">7. 混合背包问题 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;
const int N &#x3D; 1005;
int dp[N];

int main() &#123;
	int n, m;
	cin &gt;&gt; n &gt;&gt; m;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		int v, w, s;
		cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;
        &#x2F;&#x2F;01背包
		if (s &#x3D;&#x3D; -1) &#123;
			for (int j &#x3D; m; j &gt;&#x3D; v; j--) &#123;
				dp[j] &#x3D; max(dp[j], dp[j - v] + w);
			&#125;
		&#125;
        &#x2F;&#x2F;完全背包
		else if (s &#x3D;&#x3D; 0) &#123;
			for (int j &#x3D; v; j &lt;&#x3D; m; j++) &#123;
				dp[j] &#x3D; max(dp[j], dp[j - v] + w);
			&#125;
		&#125;
        &#x2F;&#x2F;多重背包，使用二进制进行优化
		else &#123;
			int k &#x3D; 1;
			while (k &lt;&#x3D; s) &#123;
				for (int j &#x3D; m; j &gt;&#x3D; k * v; j--) &#123;
					dp[j] &#x3D; max(dp[j], dp[j - k * v] + k * w);
				&#125;
				s -&#x3D; k;
				k *&#x3D; 2;
			&#125;
			if (s) &#123;
				for (int j &#x3D; m; j &gt;&#x3D; s * v; j--) &#123;
					dp[j] &#x3D; max(dp[j], dp[j - s * v] + s * w);
				&#125;
			&#125;
		&#125;
	&#125;
	cout &lt;&lt; dp[m];
	return 0;
&#125;</code></pre>



<h3 id="二维费用的背包"><a href="#二维费用的背包" class="headerlink" title="二维费用的背包"></a>二维费用的背包</h3><p><a href="https://www.acwing.com/problem/content/8/">8. 二维费用的背包问题 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;
const int N &#x3D; 1005;
int dp[N][N];

int main() &#123;
	int n, m, c;
	cin &gt;&gt; n &gt;&gt; m &gt;&gt; c;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		int a, b, t;
		cin &gt;&gt; a &gt;&gt; b &gt;&gt; t;
		for (int j &#x3D; m; j &gt;&#x3D; a; j--) &#123;
			for (int k &#x3D; c; k &gt;&#x3D; b; k--) &#123;
				dp[j][k] &#x3D; max(dp[j][k], dp[j - a][k - b] + t);
			&#125;
		&#125;
	&#125;
	cout &lt;&lt; dp[m][c];
	return 0;
&#125;</code></pre>



<h3 id="区间dp"><a href="#区间dp" class="headerlink" title="区间dp"></a>区间dp</h3><pre class="language-c++" data-language="c++"><code class="language-c++"></code></pre>





<h2 id="树图"><a href="#树图" class="headerlink" title="树图"></a>树图</h2><h3 id="链式前向星"><a href="#链式前向星" class="headerlink" title="链式前向星"></a>链式前向星</h3><p><a href="https://www.bilibili.com/video/BV1mJ411S7BB">视频推荐,讲的很好的up主</a></p>
<pre class="language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;数组模拟链表
static Node[] Edge &#x3D; new Node[10005];
static int[] Head &#x3D; new int[100005];
static int tot;

class Node&#123;
    int to;
    int w;
    int next;
&#125;

static void addEdge(int u,int v,int w)&#123;
        Edge[tot].to &#x3D; v;
        Edge[tot].w &#x3D; w;
        Edge[tot].next &#x3D; Head[u];
        Head[u] &#x3D; tot++;
    &#125;</code></pre>



<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><h4 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索(DFS)"></a>深度优先搜索(DFS)</h4><pre class="language-c++" data-language="c++"><code class="language-c++">stack实现		空间O(h),与树高有关				不具有最短路性</code></pre>



<p><a href="https://www.acwing.com/problem/content/848/">846. 树的重心 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;

int head[2 * N], e[2 * N], ne[2 * N];
int tot;
int n, ans &#x3D; N;
bool vis[2 * N];
&#x2F;&#x2F;建图
void add(int u,int v) &#123;
	e[tot] &#x3D; v;
	ne[tot] &#x3D; head[u];
	head[u] &#x3D; tot++;
&#125;
&#x2F;&#x2F;返回以u为根的子树中结点的个数
int dfs(int u) &#123;
	int sum &#x3D; 1;&#x2F;&#x2F;存储 以u为根的树的节点数, 包括u，如图中的4号节点
	int res &#x3D; 0;&#x2F;&#x2F;存储 删掉某个节点之后，最大的连通子图节点数
    &#x2F;&#x2F;只搜索一次
	vis[u] &#x3D; true;
	for (int i &#x3D; head[u]; ~i; i &#x3D; ne[i]) &#123;
		int j &#x3D; e[i];
		if (!vis[j]) &#123;
			int t &#x3D; dfs(j);
            &#x2F;&#x2F;比较以u为根节点下方的子树
			res &#x3D; max(res, t);
			sum +&#x3D; t;
		&#125;
	&#125;
    &#x2F;&#x2F;比较以u为根节点上方的子树
	res &#x3D; max(res, n - sum);
	ans &#x3D; min(ans, res);
	return sum;
&#125;

int main() &#123;
	cin &gt;&gt; n;
	memset(head, -1, sizeof(head));
	for (int i &#x3D; 0; i &lt; n - 1; i++) &#123;
		int u, v;
		cin &gt;&gt; u &gt;&gt; v;
		add(u, v);
		add(v, u);
	&#125;
	dfs(1);
	cout &lt;&lt; ans;
	return 0;
&#125;</code></pre>



<h4 id="广度优先搜索-BFS"><a href="#广度优先搜索-BFS" class="headerlink" title="广度优先搜索(BFS)"></a>广度优先搜索(BFS)</h4><pre class="language-c++" data-language="c++"><code class="language-c++">queue实现		空间O(2^n),与树的一层元素数量有关	最短路</code></pre>



<p><a href="https://www.acwing.com/problem/content/849/">847. 图中点的层次 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;树与图的广搜
    
#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;
int n, m;
int d[N];
int head[N], e[N], ne[N], tot;
void add(int u, int v) &#123;
	e[tot] &#x3D; v;
	ne[tot] &#x3D; head[u];
	head[u] &#x3D; tot++;
&#125;


int bfs() &#123;
	int que[N];
	memset(d, -1, sizeof(d));
	int hh &#x3D; 0, tt &#x3D; 0;
	que[0] &#x3D; 1;
	d[1] &#x3D; 0;
    &#x2F;&#x2F;数组模拟队列
	while (hh &lt;&#x3D; tt) &#123;
		int j &#x3D; que[hh++];
		for (int i &#x3D; head[j]; ~i; i &#x3D; ne[i]) &#123;
			int t &#x3D; e[i];
			if (d[t] &#x3D;&#x3D; -1) &#123;
				que[++tt] &#x3D; t;
				d[t] &#x3D; d[j] + 1;
			&#125;
		&#125;
	&#125;
	return d[n];
&#125;

int main() &#123;
	cin &gt;&gt; n &gt;&gt; m;
	memset(head, -1, sizeof(head));
	for (int i &#x3D; 0; i &lt; m; i++) &#123;
		int u, v;
		cin &gt;&gt; u &gt;&gt; v;
		add(u, v);
	&#125;
	cout &lt;&lt; bfs();
	return 0;
&#125;</code></pre>



<h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p><a href="https://www.acwing.com/problem/content/description/850/">848. 有向图的拓扑序列 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;
const int N &#x3D; 1e5 + 5;
int n, m;
int d[N];
int head[N], e[N], ne[N], tot;
int que[N];
void add(int u, int v) &#123;
	e[tot] &#x3D; v;
	ne[tot] &#x3D; head[u];
	head[u] &#x3D; tot++;
&#125;

bool tuopusort() &#123;
	int hh &#x3D; 0, tt &#x3D; -1;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		if (!d[i]) &#123;
            &#x2F;&#x2F;入度为0的点入队
			que[++tt] &#x3D; i;
		&#125;
	&#125;
	while (hh &lt;&#x3D; tt) &#123;
		int t &#x3D; que[hh++];
		for (int i &#x3D; head[t]; ~i; i &#x3D; ne[i]) &#123;
			int j &#x3D; e[i];
            &#x2F;&#x2F;将t-&gt;j这条边删除，j的入度--
			d[j]--;
			if (d[j] &#x3D;&#x3D; 0) &#123;
				que[++tt] &#x3D; j;
			&#125;
		&#125;
	&#125;
	return tt &#x3D;&#x3D; n - 1;
&#125;

int main() &#123;
	cin &gt;&gt; n &gt;&gt; m;
	memset(head, -1, sizeof(head));
	for (int i &#x3D; 0; i &lt; m; i++) &#123;
		int u, v;
		cin &gt;&gt; u &gt;&gt; v;
		add(u, v);
		d[v]++; &#x2F;&#x2F;v的入度++
	&#125;
	if (tuopusort()) &#123;
		for (int i &#x3D; 0; i &lt; n; i++) &#123;
			cout &lt;&lt; que[i] &lt;&lt; &quot; &quot;;
		&#125;
	&#125;
	else &#123;
		cout &lt;&lt; -1;
	&#125;
	return 0;
&#125;</code></pre>





<h3 id="单源最短路问题"><a href="#单源最短路问题" class="headerlink" title="单源最短路问题"></a>单源最短路问题</h3><h4 id="1-所有边权都是正数"><a href="#1-所有边权都是正数" class="headerlink" title="1.所有边权都是正数"></a>1.所有边权都是正数</h4><h5 id="1-朴素Dijkstra"><a href="#1-朴素Dijkstra" class="headerlink" title="1.朴素Dijkstra"></a>1.朴素Dijkstra</h5><p><a href="https://www.acwing.com/problem/content/851/">849. Dijkstra求最短路 I - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;因为所有边权为正，若有自环的话,假设第t个点有自环，dis[t]一定是小于dist[t]+g[t][t]的

#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;
const int N &#x3D; 505;

int g[N][N];
int dist[N];
bool st[N];
int n, m;

int dijkstra() &#123;
	dist[1] &#x3D; 0;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		int t &#x3D; -1;
		for (int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123;
            &#x2F;&#x2F;所有st[j] &#x3D; false的点中,dist[]最小的点
			if (!st[j] &amp;&amp; (t &#x3D;&#x3D; -1 || dist[t] &gt; dist[j])) &#123;
				t &#x3D; j;
			&#125;
		&#125;
		st[t] &#x3D; true;
		for (int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123;
			dist[j] &#x3D; min(dist[j], dist[t] + g[t][j]);
		&#125;
	&#125;
	if (dist[n] &#x3D;&#x3D; 0x3f3f3f3f) &#123;
		return -1;
	&#125;
	else
		return dist[n];
&#125;

int main() &#123;
	cin &gt;&gt; n &gt;&gt; m;
    &#x2F;&#x2F;邻接矩阵
	memset(g, 0x3f, sizeof(g));
    &#x2F;&#x2F;存起始点到第i个点的最短路径
	memset(dist, 0x3f, sizeof(dist));
	for (int i &#x3D; 0; i &lt; m; i++) &#123;
		int a, b, c;
		cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;
        &#x2F;&#x2F;取重边中最小的那个
		g[a][b] &#x3D; min(g[a][b], c);
	&#125;
	cout &lt;&lt; dijkstra();
	return 0;
&#125;</code></pre>



<h5 id="2-堆优化Dijkstra"><a href="#2-堆优化Dijkstra" class="headerlink" title="2.堆优化Dijkstra"></a>2.堆优化Dijkstra</h5><p><a href="https://www.acwing.com/problem/content/852/">850. Dijkstra求最短路 II - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;时间复杂度O(mlogn),n表示点数量，m表示边,稀疏图,链式前向星

#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;
const int N &#x3D; 1.5e5 + 5;
typedef pair&lt;int, int&gt; PII;
int head[N], e[N], ne[N], w[N], tot;
int dist[N];
bool st[N];
int n, m;
void add(int u, int v, int c) &#123;
	e[tot] &#x3D; v;
	w[tot] &#x3D; c;
	ne[tot] &#x3D; head[u];
	head[u] &#x3D; tot++;
&#125;

int dijkstra() &#123;
	priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; h;
	dist[1] &#x3D; 0;
	h.push(&#123; 0,1 &#125;); &#x2F;&#x2F;左为距离，右为结点，小顶堆先按距离排序
	while (!h.empty()) &#123;
		auto t &#x3D; h.top();
		h.pop();
		int ver &#x3D; t.second;
		int distance &#x3D; t.first;
		if (st[ver]) continue;
		st[ver] &#x3D; true;
		for (int i &#x3D; head[ver]; ~i; i &#x3D; ne[i]) &#123;
			int j &#x3D; e[i];
			if (dist[j] &gt; distance + w[i]) &#123;
				dist[j] &#x3D; distance + w[i];
				h.push(&#123; dist[j],j &#125;);
			&#125;
		&#125;
	&#125;
	if (dist[n] &#x3D;&#x3D; 0x3f3f3f3f) &#123;
		return -1;
	&#125;
	else
		return dist[n];
&#125;

int main() &#123;
	cin &gt;&gt; n &gt;&gt; m;
	memset(head, -1, sizeof head);
	memset(dist, 0x3f, sizeof dist);
	for (int i &#x3D; 0; i &lt; m; i++) &#123;
		int a, b, c;
		cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;
		add(a, b, c);
	&#125;
	cout &lt;&lt; dijkstra();
	return 0;
&#125;</code></pre>



<h4 id="2-存在负权边"><a href="#2-存在负权边" class="headerlink" title="2.存在负权边"></a>2.存在负权边</h4><h5 id="1-Bellman-Ford"><a href="#1-Bellman-Ford" class="headerlink" title="1.Bellman-Ford"></a>1.Bellman-Ford</h5><p><a href="https://www.zhihu.com/question/306895915/answer/559361032">松弛的含义可以看看这个的回答</a></p>
<p>存在负权边</p>
<pre class="language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;时间复杂度O(nm)
&#x2F;&#x2F;n表示结点数，m为总边数
class Node&#123;
    int u;
    int v;
    int w;
&#125;
&#x2F;&#x2F;第一次松弛操作经过一条边
&#x2F;&#x2F;一次松弛,从源点不一定只经过一条边
&#x2F;&#x2F;dis数组初始化为正无穷大
&#x2F;&#x2F;对所有的边进行n-1轮松弛操作，因为在一个含有n个顶点的图中，任意两点之间的最短路径最多包含n-1边
for (int i &#x3D; 1; i &lt; n; i++) &#123;       &#x2F;&#x2F;表示n-1个结点
        for (int j &#x3D; 0; j &lt; m; j++) &#123;
            if(dis[v[j]] &gt; dis[u[j]] + w[j])
                dis[v[j]] &#x3D; dis[u[j]] + w[j]
        &#125;
&#125;
&#x2F;&#x2F;n个点的时候,第一轮更新不超过1条边，第二轮更新不超过2条边···以此类推，从1~n个点中，最短的路径最多经过n-1条边
&#x2F;&#x2F;tips:如果出现了负环,我们在第N轮操作的时候也会更新</code></pre>



<p><a href="https://www.acwing.com/problem/content/855/">853. 有边数限制的最短路 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;

const int N &#x3D; 505, M &#x3D; 1e4 + 5;
int n, m, k;
int dist[N], backup[N];

struct Node &#123;
	int u, v, w;
&#125;node[M];

int bellman_ford() &#123;
	dist[1] &#x3D; 0;
	for (int i &#x3D; 0; i &lt; k; i++) &#123;
		memcpy(backup, dist, sizeof dist);  &#x2F;&#x2F;防止串联
		for (int j &#x3D; 0; j &lt; m; j++) &#123;
			int u &#x3D; node[j].u, v &#x3D; node[j].v, w &#x3D; node[j].w;
			dist[v] &#x3D; min(dist[v], backup[u] + w);
		&#125;
	&#125;
	if (dist[n] &gt;&#x3D; 0x3f3f3f3f &#x2F; 2) &#123;
		return 0x3f3f3f3f;
	&#125;
	else &#123;
		return dist[n];
	&#125;
&#125;

int main() &#123;
	cin &gt;&gt; n &gt;&gt; m &gt;&gt; k; 
	for (int i &#x3D; 0; i &lt; m; i++) &#123;
		cin &gt;&gt; node[i].u &gt;&gt; node[i].v &gt;&gt; node[i].w;
	&#125;
	memset(dist, 0x3f, sizeof dist);
	int t &#x3D; bellman_ford();
	if (t &#x3D;&#x3D; 0x3f3f3f3f) &#123;
		cout &lt;&lt; &quot;impossible&quot;;
	&#125;
	else &#123;
		cout &lt;&lt; t;
	&#125;
	return 0;
&#125;</code></pre>



<h5 id="2-SPFA"><a href="#2-SPFA" class="headerlink" title="2.SPFA"></a>2.SPFA</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//一般O(m),最坏O(nm)</span>
<span class="token comment">//关于SPFA，它死了</span></code></pre>





<h3 id="多源最短路问题"><a href="#多源最短路问题" class="headerlink" title="多源最短路问题"></a>多源最短路问题</h3><h4 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h4><pre class="language-java" data-language="java"><code class="language-java">定义一个三维数组f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> 表示从<span class="token number">1</span>到k这些点可以作为i到j的中间结点，选出一个k点作为i到j的中间结点<span class="token punctuation">,</span>也可以不经过，可推到出状态转移方程，可想为<span class="token number">01</span>背包问题
    中间结点k选
    f<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
    中间结点k不选
    f<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
    
状态转移方程为：
    f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<pre class="language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;时间复杂度O(n^3)
&#x2F;&#x2F;n个点,计算u到v的最短距离
for (int k &#x3D; 1; k &lt;&#x3D; n; k++) &#123;
    for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
        for (int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123;
            dp[k][i][j] &#x3D; Math.min(dp[k - 1][i][j], dp[k - 1][i][k] + dp[k - 1][k][j]);
        &#125;
    &#125;
&#125;


&#x2F;&#x2F;滚动数组优化
for (int k &#x3D; 1; k &lt;&#x3D; n; k++) &#123;
    for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
        for (int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123;
            dp[i][j] &#x3D; Math.min(dp[i][j], dp[i][k] + dp[k][j]);
        &#125;
    &#125;
&#125;</code></pre>



<p><a href="https://www.acwing.com/problem/content/856/">854. Floyd求最短路 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;
using namespace std;

const int N &#x3D; 205;
int n, m, k;
int dp[N][N];

void floyd() &#123;
	for (int k &#x3D; 1; k &lt;&#x3D; n; k++) &#123;
		for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
			for (int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123;
				dp[i][j] &#x3D; min(dp[i][j], dp[i][k] + dp[k][j]);
			&#125;
		&#125;
	&#125;
&#125;

int main() &#123;
	ios::sync_with_stdio(false);
	cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;
	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
		for (int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123;
			if (i &#x3D;&#x3D; j) &#123;
				dp[i][j] &#x3D; 0;
			&#125;
			else &#123;
				dp[i][j] &#x3D; 0x3f3f3f3f;
			&#125;
		&#125;
	&#125;
	for (int i &#x3D; 0; i &lt; m; i++) &#123;
		int x, y, z;
		cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;
		dp[x][y] &#x3D; min(dp[x][y], z);
	&#125;
	floyd();
	while (k--) &#123;
		int x, y;
		cin &gt;&gt; x &gt;&gt; y;
		if (dp[x][y] &gt;&#x3D; 0x3f3f3f3f &#x2F; 2) &#123;
			cout &lt;&lt; &quot;impossible&quot; &lt;&lt; endl;
		&#125;
		else &#123;
			cout &lt;&lt; dp[x][y] &lt;&lt; endl;
		&#125;
	&#125;
	return 0;
&#125;</code></pre>



<p>打印路径</p>
<pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;pass数组初始化为-1，输入时将有边的pass设置为0,说明这两点之间可以连接
void floyed() &#123;
	for (int k &#x3D; 1; k &lt;&#x3D; n; k++) &#123;
		for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
			for (int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123;
				if (dp[i][j] &gt; dp[i][k] + dp[k][j]) &#123;
					dp[i][j] &#x3D; dp[i][k] + dp[k][j];
					pass[i][j] &#x3D; k;
				&#125;
			&#125;
		&#125;
	&#125;
&#125;
void dfs(int i, int j) &#123;
	if (i &#x3D;&#x3D; j) &#123;
		return;
	&#125;
	if (pass[i][j] &#x3D;&#x3D; 0) &#123;
		cout &lt;&lt; i &lt;&lt; &quot;-&gt;&quot; &lt;&lt; j &lt;&lt; endl;
	&#125;
	else &#123;
		dfs(i, pass[i][j]);
		dfs(pass[i][j], j);
	&#125;
&#125;</code></pre>



<pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;求3到1的路径
&#x2F;&#x2F;pass数组初始化为：pass[i][j] &#x3D; j,pass数组表示从i到j第一个经过的点
&#x2F;&#x2F;pass[i][j] &#x3D; pass[i][k]
for (int i &#x3D; 0; i &lt; r; i++) &#123;
	int x, y, z;
	cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;
	dp[x][y] &#x3D; min(dp[x][y], z);	&#x2F;&#x2F;防止重边
&#125;
floyed();
int k &#x3D; 3;
while (k !&#x3D; 1) &#123;
	cout &lt;&lt; k &lt;&lt; &quot;-&gt;&quot;;
	k &#x3D; pass[k][1];
&#125;
cout &lt;&lt; k;</code></pre>



<h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><h4 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h4><p><a href="https://www.acwing.com/problem/content/description/860/">858. Prim算法求最小生成树 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;cstring&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N &#x3D; 505, INF &#x3D; 0x3f3f3f3f;
int g[N][N];
int n, m;
int dist[N];  &#x2F;&#x2F;集合外的点到集合的最小距离
bool st[N];

int prim() &#123;
	int ans &#x3D; 0;
	dist[1] &#x3D; 0;
	for (int i &#x3D; 0; i &lt; n; i++) &#123;
		int t &#x3D; -1;
		for (int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123;
			if (!st[j] &amp;&amp; (t &#x3D;&#x3D; -1 || dist[t] &gt; dist[j])) &#123;
				t &#x3D; j;
			&#125;
		&#125;
		if (dist[t] &#x3D;&#x3D; INF) &#123;
			return INF;
		&#125;
        &#x2F;&#x2F;加入集合
		st[t] &#x3D; true;
		ans +&#x3D; dist[t];
		for (int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123;
			dist[j] &#x3D; min(dist[j], g[t][j]);
		&#125;
	&#125;
	return ans;
&#125;


int main() &#123;
	cin &gt;&gt; n &gt;&gt; m;
	memset(dist, INF, sizeof dist);
	memset(g, INF, sizeof g);
	while (m--) &#123;
		int u, v, w;
		cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;
		g[u][v] &#x3D; g[v][u] &#x3D; min(g[u][v], w);
	&#125;
	int t &#x3D; prim();
	if (t &#x3D;&#x3D; INF) &#123;
		cout &lt;&lt; &quot;impossible&quot;;
	&#125;
	else &#123;
		cout &lt;&lt; t;
	&#125;
	return 0;
&#125;</code></pre>





<h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><h3 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h3><pre class="language-java" data-language="java"><code class="language-java">如果a，b是整数<span class="token punctuation">,</span>那么一定存在整数x<span class="token punctuation">,</span>y使得ax<span class="token operator">+</span>by<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>
扩展欧几里得算法即是为了求出x<span class="token punctuation">,</span>y
扩展欧几里得算法可以求同余方程以及逆元
本例通过递归加以实现
    根据欧几里得原理有 <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	即ax1 <span class="token operator">+</span> by1 <span class="token operator">=</span> bx2 <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> b<span class="token punctuation">)</span>y2<span class="token punctuation">;</span>
	又因为a <span class="token operator">%</span> b <span class="token operator">=</span> a <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">;</span>
	<span class="token operator">-></span> ax1 <span class="token operator">+</span> by1 <span class="token operator">=</span> ay2 <span class="token operator">+</span> <span class="token function">b</span><span class="token punctuation">(</span>x2 <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token operator">*</span>y2<span class="token punctuation">;</span>
    <span class="token operator">-></span> x1 <span class="token operator">=</span> y2<span class="token punctuation">;</span>
       y1 <span class="token operator">=</span> x2 <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token operator">*</span>y2<span class="token punctuation">;</span></code></pre>



<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ex_gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> a<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">ex_gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> x<span class="token punctuation">;</span>
        x <span class="token operator">=</span> y<span class="token punctuation">;</span>                  <span class="token comment">//通过公式推导本层与下层之间的关系</span>
        y <span class="token operator">=</span> temp <span class="token operator">-</span> a <span class="token operator">/</span> b <span class="token operator">*</span> y<span class="token punctuation">;</span>
        <span class="token keyword">return</span> r<span class="token punctuation">;</span>               <span class="token comment">//返回gcd</span>
    <span class="token punctuation">&#125;</span></code></pre>





<h3 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h3><h4 id="Nim游戏"><a href="#Nim游戏" class="headerlink" title="Nim游戏"></a>Nim游戏</h4><p><a href="https://www.acwing.com/problem/content/893/">891. Nim游戏 - AcWing题库</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++">先手制造一个相同的局面，让后手先动手，先手跟着他必胜
    
先手必胜状态：可以走到某一个后手必败的状态
先手必败状态：走不到任何一个后手必败的状态
    
a1^a2^···^an &#x3D; 0  先手必败
    		 !&#x3D;0  先手必胜
    
    
找到x的二进制表示中最高位的1，
假设它就存在于第i堆石子的二进制表示中。
那么我们只需要从第i堆石子中拿走A[i]-A[i]^x个石子
异或值就会变成A[1]^A[2]^……^(A[i]-(A[i]-A[i]^x))^……^A[n],&#x3D;A[1]^A[2]^……^A[i]^x^……^A[n]

A[1]^A[2]^……^A[n]是等于x的。
所以上述的式子就等于x^x&#x3D;0

所以当x≠0，该谁走了，这个人就一定可以把x变成0，再推给对手
对手不管怎么取，一定会再次把x变成非0（这个很好理解）
最后因为0^0^……^0&#x3D;0，所以输掉的一定是对手。</code></pre>

<pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;

int main()&#123;
    int n;
    int res &#x3D; 0;
    cin&gt;&gt;n;
    while(n--)&#123;
        int x;
        cin&gt;&gt;x;
        res^&#x3D;x;
    &#125;
    if(res)&#123;
        cout &lt;&lt; &quot;Yes&quot;;
    &#125;else&#123;
        cout &lt;&lt; &quot;No&quot;;
    &#125;
    return 0;
&#125;</code></pre>



<h4 id="集合-Nim游戏"><a href="#集合-Nim游戏" class="headerlink" title="集合-Nim游戏"></a>集合-Nim游戏</h4><p><a href="https://www.acwing.com/problem/content/895/">893. 集合-Nim游戏 - AcWing题库</a></p>
<p><a href="https://www.acwing.com/solution/content/119461/">AcWing 893. 集合-Nim游戏——有图有思路 - AcWing</a></p>
<pre class="language-c++" data-language="c++"><code class="language-c++"></code></pre>

]]></content>
  </entry>
</search>
